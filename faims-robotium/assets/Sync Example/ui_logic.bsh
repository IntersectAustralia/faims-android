// USER

login(){
	Object userResult = fetchOne("select userid, fname, lname, email from user where userid='" + getListItemValue() + "';");
	user = new User(userResult.get(0), userResult.get(1), userResult.get(2), userResult.get(3));
	setUser(user);
	showTabGroup("menu");
}

onEvent("user/tab1/users", "click", "login()");

loadUsers() {
	Object usersList = fetchAll("select userid, fname ||' ' || lname from user");
	populateList("user/tab1/users", usersList);
}

onEvent("user", "show", "loadUsers()");

// CONTROLS

createOption(id, name) {
	ArrayList option = new ArrayList();
	option.add(id);
	option.add(name);
	return option;
}

options = new ArrayList();
options.add(createOption("entity", "Create Entity"));
options.add(createOption("relationship", "Create Relationship"));
options.add(createOption("add", "Add Association"));
options.add(createOption("controls", "Controls"));

populateList("menu/tab1/options", options);

onClickOption() {
	String value = getListItemValue();
	if ("entity".equals(value)) {
		showTabGroup("tabgroup1");
	} else if ("relationship".equals(value)) {
		showTabGroup("tabgroup2");
	} else if ("add".equals(value)) {
		showTabGroup("tabgroup4");
	} else {
		showTabGroup("tabgroup3");
	}
}

onEvent("menu/tab1/options", "click", "onClickOption()");

startSync() {
	setSyncEnabled(true);
	setFileSyncEnabled(true);
}

stopSync() {
	setSyncEnabled(false);
}

init() {
	setSyncMinInterval(10.0f);
	setSyncMaxInterval(20.0f);
	setSyncDelay(5.0f);
	startSync();
}

cleanup() {
	stopSync();
}

onEvent("menu", "show", "init()"); 
onEvent("user", "show", "cleanup()");

onEvent("tabgroup3/tab1/start", "click", "startSync()");
onEvent("tabgroup3/tab1/stop", "click", "stopSync()");

// ENTITY

String entityId = null;

initEntity() {
	clearEntity();
}

onEvent("tabgroup1", "show", "initEntity()");	

closeEntity() {
	cancelTabGroup("tabgroup1", true);
}

onEvent("tabgroup1/tab1/close", "click", "closeEntity()");

loadEntities() {
	Object entities = fetchEntityList("small");
	populateDropDown("tabgroup1/tab2/entities", entities);
}
loadEntities();

onEvent("tabgroup1/tab2", "show", "loadEntities()");

saveEntity() {
	updateEntity();
}

loadEntity() {
	clearEntity();

	entityId = getFieldValue("tabgroup1/tab2/entities");
	
	if (isNull(entityId)) return;
	
	showTab("tabgroup1/tab1", entityId);
}

reloadEntity() {
	if (isNull(entityId)) return;
	
	showTab("tabgroup1/tab1", entityId);
}

updateEntity() {
	if (isNull(entityId)) entityId = null;
	
	attributes = null;
	if (entityId == null) {
		attributes = createAttributeList();
		entityCount = Integer.valueOf(fetchOne("select count(distinct(uuid)) from archentity;").get(0)) + 1;
		attributes.add(createEntityAttribute("entity", "Small " + entityCount, null, null, null));
	}
	
	saveTabGroup("tabgroup1", entityId, null, attributes, "entityId = getLastSavedRecordId(); reloadEntity();");
}

clearEntity() {
	Object locations = fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = 'location';");
	populateCheckBoxGroup("tabgroup1/tab1/location", locations);
	
	populateHierarchicalDropDown("tabgroup1/tab1/type", "type");
	populateHierarchicalPictureGallery("tabgroup1/tab1/rocks", "rocks");
	
	Object pictures = fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'gallery';");
	populatePictureGallery("tabgroup1/tab1/gallery", pictures);
	
	entityId = null;
	
	newTab("tabgroup1/tab1");
	
	setFieldValue("tabgroup1/tab1/timestamp", getCurrentTime());
}

deleteEntity(){
	if (isNull(entityId)) return;
	
	deleteArchEnt(entityId);
	entityId = null;
	
    cancelTabGroup("tabgroup1", false);
}

onEvent("tabgroup1/tab1/save", "delayclick", "saveEntity()");
onEvent("tabgroup1/tab1/clear", "click", "clearEntity()");
onEvent("tabgroup1/tab2/load", "click", "loadEntity()");
onEvent("tabgroup1/tab1/delete", "click", "deleteEntity()");

onEvent("tabgroup1/tab1/attachfile", "click", "attachFileTo(\"tabgroup1/tab1/files\")");
onEvent("tabgroup1/tab1/attachpicture", "click", "attachPictureTo(\"tabgroup1/tab1/pictures\")");
onEvent("tabgroup1/tab1/attachvideo", "click", "attachVideoTo(\"tabgroup1/tab1/videos\")");
onEvent("tabgroup1/tab1/attachaudio", "click", "attachAudioTo(\"tabgroup1/tab1/audios\")");

onEvent("tabgroup1/tab1/viewattached", "click", "viewArchEntAttachedFiles(entityId)");

// RELATIONSHIP

String relationshipId = null;

initRelationship() {
	clearRelationship();
}

onEvent("tabgroup2", "show", "initRelationship()");	

closeRelationship() {
	cancelTabGroup("tabgroup2", true);
}

onEvent("tabgroup2/tab1/close", "click", "closeRelationship()");

loadRelationships() {
	Object relationships = fetchRelationshipList("abovebelow");
	populateDropDown("tabgroup2/tab2/relationships", relationships);
}
loadRelationships();

onEvent("tabgroup2/tab2", "show", "loadRelationships()");

saveRelationship() {
	updateRelationship();
}

loadRelationship() {
	clearRelationship();

	relationshipId = getFieldValue("tabgroup2/tab2/relationships");
	
	if (isNull(relationshipId)) return;
	
	showTab("tabgroup2/tab1", relationshipId);
}

reloadRelationship() {
	if (isNull(relationshipId)) return;
	
	showTab("tabgroup2/tab1", relationshipId);
}

updateRelationship() {
	if (isNull(relationshipId)) relationshipId = null;
	
	attributes = null;
	if (relationshipId == null) {
		attributes = createAttributeList();
		relationshipCount = Integer.valueOf(fetchOne("select count(distinct(relationshipid)) from relationship;").get(0)) + 1;
		attributes.add(createRelationshipAttribute("relationship", "AboveBelow " + relationshipCount, null, null));
	}
	
	saveTabGroup("tabgroup2", relationshipId, null, attributes, "relationshipId = getLastSavedRecordId(); reloadRelationship();");
}

clearRelationship() {
	Object locations = fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = 'location';");
	populateCheckBoxGroup("tabgroup2/tab1/location", locations);
	
	populateHierarchicalDropDown("tabgroup2/tab1/type", "type");
	populateHierarchicalPictureGallery("tabgroup2/tab1/rocks", "rocks");
	
	Object pictures = fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'gallery';");
	populatePictureGallery("tabgroup2/tab1/gallery", pictures);
	
	relationshipId = null;
	
	newTab("tabgroup2/tab1");
	
	setFieldValue("tabgroup2/tab1/timestamp", getCurrentTime());
}

deleteRelationship(){
	if (isNull(relationshipId)) return;
	
	deleteRel(relationshipId);
	relationshipId = null;
	
    cancelTabGroup("tabgroup2", false);
}

onEvent("tabgroup2/tab1/save", "delayclick", "saveRelationship()");
onEvent("tabgroup2/tab1/clear", "click", "clearRelationship()");
onEvent("tabgroup2/tab2/load", "click", "loadRelationship()");
onEvent("tabgroup2/tab1/delete", "click", "deleteRelationship()");

onEvent("tabgroup2/tab1/attachfile", "click", "attachFileTo(\"tabgroup2/tab1/files\")");
onEvent("tabgroup2/tab1/attachpicture", "click", "attachPictureTo(\"tabgroup2/tab1/pictures\")");
onEvent("tabgroup2/tab1/attachvideo", "click", "attachVideoTo(\"tabgroup2/tab1/videos\")");
onEvent("tabgroup2/tab1/attachaudio", "click", "attachAudioTo(\"tabgroup2/tab1/audios\")");

onEvent("tabgroup2/tab1/viewattached", "click", "viewRelAttachedFiles(relationshipId)");

// ASSOCIATIONS

loadMembers() {
	Object entities = fetchEntityList("small");
	populateDropDown("tabgroup4/tab1/entities", entities);
	
	Object relationships = fetchRelationshipList("abovebelow");
	populateDropDown("tabgroup4/tab1/relationships", relationships);
}

onEvent("tabgroup4", "show", "loadMembers()");

onEvent("tabgroup4/tab1/add", "click", "onAddMember()");

onAddMember() {
	eid = getFieldValue("tabgroup4/tab1/entities");
	rid = getFieldValue("tabgroup4/tab1/relationships");
	if (isNull(eid) || isNull(rid)) return;
	
	verb = getFieldValue("tabgroup4/tab1/verb");
	
	addReln(eid, rid, verb);
	
	showToast("Added relationship member");
}

onEvent("tabgroup1/tab1/type", "click", "clickEventToast(\"Hierarchical dropdown click event\")");

onEvent("tabgroup1/tab1/gallery", "click", "clickEventToast(\"Gallery click event\")");

onEvent("tabgroup1/tab1/rocks", "click", "clickEventToast(\"Hierarchical gallery click event\")");

onEvent("tabgroup1/tab2/entities", "click", "clickEventToast(\"Dropdown click event\")");

clickEventToast(string) {
	showToast(string);
}