// USER

login() {
	fetchOne("select userid, fname, lname, email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
		onFetch(result) {
			user = new User(result.get(0), result.get(1), result.get(2), result.get(3));
			setUser(user);
			showTabGroup("menu");
		}
	});
}

onEvent("user/tab1/users", "click", "login()");

loadUsers() {
	fetchAll("select userid, fname ||' ' || lname from user where userdeleted is NULL", new FetchCallback() {
		onFetch(result) {
			populateList("user/tab1/users", result);
		}
	});
}

onEvent("user", "show", "loadUsers()");

// CONTROLS

createOption(name, value) {
	ArrayList option = new ArrayList();
	option.add(name);
	option.add(value);
	return option;
}

options = new ArrayList();
options.add(createOption("entity", "Create Entity"));
options.add(createOption("relationship", "Create Relationship"));
options.add(createOption("add", "Add Association"));
options.add(createOption("table", "Table Example"));
options.add(createOption("bluetooth", "Bluetooth Example"));
options.add(createOption("controls", "Controls"));

populateList("menu/tab1/options", options);

onClickOption() {
	String value = getListItemValue();
	if ("entity".equals(value)) {
		showTabGroup("tabgroup1");
	} else if ("relationship".equals(value)) {
		showTabGroup("tabgroup2");
	} else if ("add".equals(value)) {
		showTabGroup("tabgroup4");
	} else if ("table".equals(value)) {
		showTabGroup("tabgroup5");
	} else if ("bluetooth".equals(value)) {
		showTabGroup("tabgroup6");
	} else {
		showTabGroup("tabgroup3");
	}
}

onEvent("menu/tab1/options", "click", "onClickOption()");

startSync() {
	setSyncEnabled(true);
	setFileSyncEnabled(true);
}

stopSync() {
	setSyncEnabled(false);
}

init() {
	setSyncMinInterval(10.0f);
	setSyncMaxInterval(20.0f);
	setSyncDelay(5.0f);
	// reset ids
	entityId = tableEntityId = null;
	relationshipId = tableRelationshipId = null;
}

cleanup() {
	stopSync();
}

onEvent("menu", "show", "init()"); 
onEvent("user", "show", "cleanup()");

onEvent("tabgroup3/tab1/start", "click", "startSync()");
onEvent("tabgroup3/tab1/stop", "click", "stopSync()");

// ENTITY

String entityId = null;
String tableEntityId = null;

initEntity() {
 	clearEntity();
}

onEvent("tabgroup1", "show", "initEntity()");	

closeEntity() {
	cancelTabGroup("tabgroup1", true);
}

onEvent("tabgroup1/tab1/close", "click", "closeEntity()");

loadEntities() {
	fetchEntityList("small", new FetchCallback() {
		onFetch(result) {
			populateDropDown("tabgroup1/tab2/entities", result);
		}
	});
}
loadEntities();

onEvent("tabgroup1/tab2", "show", "loadEntities()");

saveEntity() {
	updateEntity();
}

loadEntity() {
	clearEntity();

	entityId = getFieldValue("tabgroup1/tab2/entities");
	
	if (isNull(entityId)) return;
	
	showTab("tabgroup1/tab1", entityId);
}

reloadEntity() {
	if (isNull(entityId)) return;
	
	showTab("tabgroup1/tab1", entityId);
}

updateEntity() {
	if (isNull(entityId)) entityId = null;

	if (entityId == null && tableEntityId != null) entityId = tableEntityId;
	
	attributes = null;
	if (entityId == null) {
		fetchOne("select count(distinct(uuid)) from archentity;", new FetchCallback() {
			onFetch(result) {
				attributes = createAttributeList();
				entityCount = Integer.valueOf(result.get(0)) + 1;
				attributes.add(createEntityAttribute("entity", "Small " + entityCount, null, null, null));
				saveTabGroup("tabgroup1", entityId, null, attributes, new SaveCallback(){
					onSave(id, newRecord) {
						if (newRecord) {
							showToast("added new record");
						}
						global.entityId = id;
						reloadEntity();
					}
				});
			}
		});
	} else {
		saveTabGroup("tabgroup1", entityId, null, attributes, new SaveCallback(){
			onSave(id, newRecord) {
				if (newRecord) {
					showToast("added new record");
				}
				global.entityId = id;
				reloadEntity();
			}
		});
	}
}

clearEntity() {
	fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = 'location';", new FetchCallback() {
		onFetch(result) {
			populateCheckBoxGroup("tabgroup1/tab1/location", result);
			populateRadioGroup("tabgroup1/tab1/location2", result);
		}
	});
	
	populateHierarchicalDropDown("tabgroup1/tab1/type", "type");
	populateHierarchicalPictureGallery("tabgroup1/tab1/rocks", "rocks");
	
	fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'gallery';", new FetchCallback() {
		onFetch(result) {
			populatePictureGallery("tabgroup1/tab1/gallery", result);
		}
	});
	
	entityId = null;
	
	newTab("tabgroup1/tab1");
	
	setFieldValue("tabgroup1/tab1/timestamp", getCurrentTime());
}

deleteEntity(){
	if (isNull(entityId)) return;
	
	deleteArchEnt(entityId, new DeleteCallback() {
		onDelete(uuid) {
			showToast("deleted entity");
		}
	});
	entityId = null;
	
  cancelTabGroup("tabgroup1", false);
}

onEvent("tabgroup1/tab1/textalert", "click", "showTextAlert(\"Alert\", \"Message here:\", \"showInput()\", \"showToast('Cancel')\")");
showInput() {
	input = getLastTextAlertInput();
	showToast(input);
}

onEvent("tabgroup1/tab1/save", "delayclick", "saveEntity()");
onEvent("tabgroup1/tab1/clear", "click", "clearEntity()");
onEvent("tabgroup1/tab2/load", "click", "loadEntity()");
onEvent("tabgroup1/tab1/delete", "click", "deleteEntity()");
onEvent("tabgroup1/tab1/showEntityId", "click", "setFieldValue(\"tabgroup1/tab1/entityID\", entityId)");

onEvent("tabgroup1/tab1/attachfile", "click", "attachFileTo(\"tabgroup1/tab1/files\")");
onEvent("tabgroup1/tab1/attachpicture", "click", "attachPictureTo(\"tabgroup1/tab1/pictures\")");
onEvent("tabgroup1/tab1/attachvideo", "click", "attachVideoTo(\"tabgroup1/tab1/videos\")");
onEvent("tabgroup1/tab1/attachaudio", "click", "attachAudioTo(\"tabgroup1/tab1/audios\")");
onEvent("tabgroup1/tab1/scancode", "click", "onClickScanner()");

onEvent("tabgroup1/tab1/viewattached", "click", "viewArchEntAttachedFiles(entityId)");

onEvent("tabgroup1/tab1/location", "click", "clickEventToast(\"Checkbox click event\")");
onEvent("tabgroup1/tab2/entities", "select", "clickEventToast(\"Dropdown select event\")");
onEvent("tabgroup1/tab1/type", "select", "clickEventToast(\"Hierarchical dropdown select event\")");
onEvent("tabgroup1/tab1/gallery", "select", "clickEventToast(\"Gallery select event\")");
onEvent("tabgroup1/tab1/rocks", "select", "clickEventToast(\"Hierarchical gallery select event\")");
onEvent("tabgroup1/tab1/location2", "select", "clickEventToast(\"Radiogroup select event\")");

clickEventToast(string) {
	showToast(string);
}

// RELATIONSHIP

String relationshipId = null;
String tableRelationshipId = null;

initRelationship() {
	clearRelationship();
}

onEvent("tabgroup2", "show", "initRelationship()");	

closeRelationship() {
	cancelTabGroup("tabgroup2", true);
}

onEvent("tabgroup2/tab1/close", "click", "closeRelationship()");

loadRelationships() {
	fetchRelationshipList("abovebelow", new FetchCallback() {
		onFetch(result) {
			populateDropDown("tabgroup2/tab2/relationships", result);
		}
	});
}
loadRelationships();

onEvent("tabgroup2/tab2", "show", "loadRelationships()");

saveRelationship() {
	updateRelationship();
}

loadRelationship() {
	clearRelationship();

	relationshipId = getFieldValue("tabgroup2/tab2/relationships");
	
	if (isNull(relationshipId)) return;
	
	showTab("tabgroup2/tab1", relationshipId);
}

reloadRelationship() {
	if (isNull(relationshipId)) return;
	
	showTab("tabgroup2/tab1", relationshipId);
}

updateRelationship() {
	if (isNull(relationshipId)) relationshipId = null;

	if (relationshipId == null && tableRelationshipId != null) relationshipId = tableRelationshipId;
	
	attributes = null;
	if (relationshipId == null) {
		fetchOne("select count(distinct(relationshipid)) from relationship;", new FetchCallback() {
			onFetch(result) {
				attributes = createAttributeList();
				relationshipCount = Integer.valueOf(result.get(0)) + 1;
				attributes.add(createRelationshipAttribute("relationship", "AboveBelow " + relationshipCount, null, null));
				saveTabGroup("tabgroup2", relationshipId, null, attributes, new SaveCallback(){
					onSave(id, newRecord) {
						if (newRecord) {
							showToast("added new record");
						}
						global.relationshipId = id;
						reloadRelationship();
					}
				});
			}
		});
	} else {
		saveTabGroup("tabgroup2", relationshipId, null, attributes, new SaveCallback(){
			onSave(id, newRecord) {
				if (newRecord) {
					showToast("added new record");
				}
				global.relationshipId = id;
				reloadRelationship();
			}
		});
	}
}

clearRelationship() {
	fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = 'location';", new FetchCallback() {
		onFetch(result) {
			populateCheckBoxGroup("tabgroup2/tab1/location", result);
		}
	});
	
	populateHierarchicalDropDown("tabgroup2/tab1/type", "type");
	populateHierarchicalPictureGallery("tabgroup2/tab1/rocks", "rocks");
	
	fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = 'gallery';", new FetchCallback() {
		onFetch(result) {
			populatePictureGallery("tabgroup2/tab1/gallery", result);
		}
	});

	relationshipId = null;
	
	newTab("tabgroup2/tab1");
	
	setFieldValue("tabgroup2/tab1/timestamp", getCurrentTime());
}

deleteRelationship(){
	if (isNull(relationshipId)) return;
	
	deleteRel(relationshipId, new DeleteCallback() {
		onDelete(uuid) {
			showToast("deleted relationship");
		}
	});
	relationshipId = null;
	
  cancelTabGroup("tabgroup2", false);
}

onEvent("tabgroup2/tab1/save", "delayclick", "saveRelationship()");
onEvent("tabgroup2/tab1/clear", "click", "clearRelationship()");
onEvent("tabgroup2/tab2/load", "click", "loadRelationship()");
onEvent("tabgroup2/tab1/delete", "click", "deleteRelationship()");

onEvent("tabgroup2/tab1/attachfile", "click", "attachFileTo(\"tabgroup2/tab1/files\")");
onEvent("tabgroup2/tab1/attachpicture", "click", "attachPictureTo(\"tabgroup2/tab1/pictures\")");
onEvent("tabgroup2/tab1/attachvideo", "click", "attachVideoTo(\"tabgroup2/tab1/videos\")");
onEvent("tabgroup2/tab1/attachaudio", "click", "attachAudioTo(\"tabgroup2/tab1/audios\")");
onEvent("tabgroup2/tab1/scancode", "click", "onClickScanner()");

onClickScanner() {
	scanCode("onCodeScan()");
}

onCodeScan() {
	code = getLastScanContents();
	showToast(code);
}

onEvent("tabgroup2/tab1/viewattached", "click", "viewRelAttachedFiles(relationshipId)");

// ASSOCIATIONS

loadMembers() {
	fetchEntityList("small", new FetchCallback() {
		onFetch(result) {
			populateDropDown("tabgroup4/tab1/entities", result);
		}
	});
	
	fetchRelationshipList("abovebelow", new FetchCallback() {
		onFetch(result) {
			populateDropDown("tabgroup4/tab1/relationships", result);
		}
	});
}

onEvent("tabgroup4", "show", "loadMembers()");

onEvent("tabgroup4/tab1/add", "click", "onAddMember()");

onAddMember() {
	eid = getFieldValue("tabgroup4/tab1/entities");
	rid = getFieldValue("tabgroup4/tab1/relationships");
	if (isNull(eid) || isNull(rid)) return;
	
	verb = getFieldValue("tabgroup4/tab1/verb");
	
	addReln(eid, rid, verb, new SaveCallback() {
		onSaveAssociation(entityId, relId) {
			showToast("Added relationship member");
		}
	});
}

// TABLE View

tableQuery = new ArrayList();
tableQuery.add("SELECT uuid, group_concat(coalesce(measure   || ' '  || vocabname || '('  ||  freetext           ||'; '|| (certainty * 100.0) || '% certain)', \n" + 
				"	 									   measure   || ' (' || freetext  || '; ' || (certainty * 100.0) || '% certain)', \n" + 
				"	 									   vocabname || ' (' || freetext  || '; ' || (certainty * 100.0) || '% certain)', \n" + 
				"	 									   measure   || ' '  || vocabname || ' (' || (certainty * 100.0) || '% certain)', \n" + 
				"	 								  	   vocabname || ' (' || freetext  || ')', \n" + 
				"	 								  	   measure   || ' (' || freetext  || ')', \n" + 
				"	 									   measure   || ' (' ||(certainty * 100.0) || '% certain)', \n" + 
				"	 									   vocabname || ' (' ||(certainty * 100.0) || '% certain)', \n" + 
				"	 									   freetext  || ' (' ||(certainty * 100.0) || '% certain)', \n" + 
				"	 									   measure, \n" + 
				"	 									   vocabname, \n" + 
				"	 									   freetext), ' | ') as response, uuid \n" +
				" 			FROM latestNonDeletedArchentIdentifiers\n" +
				" 			GROUP BY uuid;");
tableQuery.add("SELECT relationshipid, group_concat(coalesce(vocabname || ' (' || freetext  ||'; '|| (certainty * 100.0) || '% certain)', \n" + 
				" 													 vocabname || ' (' || freetext || ')', \n" + 
				" 												 	 vocabname || ' (' || (certainty * 100.0) || '% certain)', \n" + 
				" 													 freetext  || ' (' || (certainty * 100.0) || '% certain)', \n" + 
				" 													 vocabname, \n" + 
				" 													 freetext), ' | ') as response, relationshipid \n" +
				" 		FROM latestNonDeletedRelnIdentifiers \n" +
				" 		GROUP BY relationshipid;");
tableQuery.add("select uuid, attributename, response\n" + 
				"from (select attributename, attributeid\n" + 
				"from attributekey join idealaent using (attributeid) join aenttype using (aenttypeid)\n" + 
				"where aenttypename = 'small'), (select uuid, aenttypeid, aenttypename, aenttimestamp, group_concat(coalesce(measure, freetext, vocabname, '<null>'), '|') || coalesce(case certainty <1 when 1 then '?' end, '') as isIdent\n" + 
				"from latestnondeletedarchentidentifiers \n" + 
				"where aenttypename = 'small'\n" + 
				"group by uuid\n" + 
				"order by attributename\n" + 
				") as id \n" + 
				"left outer join \n" + 
				"(select uuid, valuetimestamp, attributename, attributeid, group_concat(coalesce(measure    || ' '  || vocabname  || '(' ||freetext||') '||  coalesce(case certainty <1 when 1 then '?' end, '') ,\n" + 
				"                                                                                              measure    || ' (' || freetext   ||')'||  coalesce(case certainty <1 when 1 then '?' end, '') ,\n" + 
				"                                                                                              vocabname  || ' (' || freetext   ||')'||  coalesce(case certainty <1 when 1 then '?' end, '') ,\n" + 
				"                                                                                              measure    || ' ' || vocabname   ||  coalesce(case certainty <1 when 1 then '?' end, '') ,\n" + 
				"                                                                                              vocabname  || ' (' || freetext || ')',\n" + 
				"                                                                                              measure    || ' (' || freetext || ')',\n" + 
				"                                                                                              measure    || coalesce(case certainty <1 when 1 then '?' end, '') ,\n" + 
				"                                                                                              vocabname  || coalesce(case certainty <1 when 1 then '?' end, '') ,\n" + 
				"                                                                                              freetext   || coalesce(case certainty <1 when 1 then '?' end, '') ,\n" + 
				"                                                                                              measure,\n" + 
				"                                                                                              vocabname,\n" + 
				"                                                                                              freetext), ' | ') as response\n" + 
				"FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttimestamp          \n" + 
				"          FROM latestnondeletedaentvalue join latestnondeletedarchent using (uuid)\n" + 
				"          JOIN attributekey using (attributeid)          \n" + 
				"          LEFT OUTER JOIN vocabulary USING (vocabid, attributeid)          \n" + 
				"       ORDER BY uuid, attributename ASC)\n" + 
				"group by uuid, attributeid) using (uuid, attributeid, attributename)\n" + 
				"union \n" + 
				"select uuid, 'geometry', astext(geospatialcolumn)\n" + 
				"from (select uuid, aenttypeid, aenttypename, aenttimestamp, group_concat(coalesce(measure, freetext, vocabname, '<null>'), '|') || coalesce(case certainty <1 when 1 then '?' end, '') as isIdent, geospatialcolumn\n" + 
				"from latestnondeletedarchentidentifiers \n" + 
				"where aenttypename = 'small'\n" + 
				"group by uuid\n" + 
				"order by attributename\n" + 
				") as id \n" + 
				"union \n" + 
				"select uuid, 'username', fname || ' ' || lname\n" + 
				"from (select uuid, aenttypeid, aenttypename, aenttimestamp, group_concat(coalesce(measure, freetext, vocabname, '<null>'), '|') || coalesce(case certainty <1 when 1 then '?' end, '') as isIdent, fname, lname\n" + 
				"from latestnondeletedarchentidentifiers join user using (userid)\n" + 
				"where aenttypename = 'small'\n" + 
				"group by uuid\n" + 
				"order by attributename\n" + 
				") as id \n" + 
				"union \n" + 
				"select uuid, 'action', uuid \n" + 
				"from latestnondeletedarchent join aenttype using (aenttypeid) \n" + 
				"where aenttypename = 'small' \n" + 
				"group by uuid \n" + 
				"order by uuid, attributename;");
tableQuery.add("select relationshipid, attributename, response\n" + 
				"from (select attributename, attributeid \n" + 
				"from attributekey join idealreln using (attributeid) join relntype using (relntypeid)\n" + 
				"where relntypename = 'AboveBelow'),\n" + 
				"(select relationshipid, relntypename, relntypeid, relntimestamp, group_concat(coalesce(freetext, vocabname, '<null>'), '|') || coalesce(case certainty <1 when 1 then '?' end, '') as isIdent\n" + 
				"from latestNonDeletedRelnIdentifiers\n" + 
				"where relntypename = 'AboveBelow'\n" + 
				"group by relationshipid\n" + 
				"order by attributename\n" + 
				") left outer join (\n" + 
				"select relationshipid, relnvaluetimestamp, attributename, attributeid, group_concat(coalesce(vocabname  || ' (' || freetext   ||')'||  coalesce(case certainty <1 when 1 then '?' end, '') ,\n" + 
				"                                                                                         vocabname  || ' (' || freetext || ')',\n" + 
				"                                                                                         vocabname  || coalesce(case certainty <1 when 1 then '?' end, '') ,\n" + 
				"                                                                                         freetext   || coalesce(case certainty <1 when 1 then '?' end, '') ,\n" + 
				"                                                                                         vocabname,\n" + 
				"                                                                                         freetext), ' | ') as response\n" + 
				"FROM (  SELECT relationshipid, attributeid, vocabid, attributename, vocabname,  freetext, certainty, attributetype, relnvaluetimestamp, relntimestamp\n" + 
				"          FROM latestnondeletedrelnvalue join latestnondeletedrelationship using (relationshipid)\n" + 
				"          JOIN attributekey using (attributeid)          \n" + 
				"          LEFT OUTER JOIN vocabulary USING (vocabid, attributeid)          \n" + 
				"       ORDER BY relationshipid, attributename ASC)\n" + 
				"group by relationshipid, attributeid) using (relationshipid, attributeid, attributename)\n" + 
				"union \n" + 
				"select relationshipid, 'geometry', astext(geospatialcolumn)\n" + 
				"from (select relationshipid, relntypename, relntypeid, relntimestamp, group_concat(coalesce(freetext, vocabname, '<null>'), '|') || coalesce(case certainty <1 when 1 then '?' end, '')as isIdent, geospatialcolumn\n" + 
				"from latestNonDeletedRelnIdentifiers\n" + 
				"where relntypename = 'AboveBelow'\n" + 
				"group by relationshipid\n" + 
				"order by attributename)\n" + 
				"union \n" + 
				"select relationshipid, 'username', fname || ' ' || lname\n" + 
				"from (select relationshipid, relntypeid, relntypename, relntimestamp, group_concat(coalesce(freetext, vocabname, '<null>'), '|') || coalesce(case certainty <1 when 1 then '?' end, '')as isIdent, fname, lname\n" + 
				"from latestNonDeletedRelnIdentifiers join user using (userid)\n" + 
				"where relntypename = 'AboveBelow'\n" + 
				"group by relationshipid\n" + 
				"order by attributename)\n" + 
				"union\n" + 
				"select relationshipid, 'action', relationshipid \n" + 
				"from latestNonDeletedRelnIdentifiers join relntype using (relntypeid) \n" + 
				"where relntype.relntypename = 'AboveBelow' \n" + 
				"group by relationshipid \n" + 
				"order by relationshipid, attributename;");

createTableHeaders(headers) {
	ArrayList listHeaders = new ArrayList();
	for (String header : headers) {
		listHeaders.add(header);
	}
	return listHeaders;
}

tableHeaders = new ArrayList();
tableHeaders.add(createTableHeaders(new String[]{ "uuid", "identifier", "action" }));
tableHeaders.add(createTableHeaders(new String[]{ "relationshipid", "identifier", "action" }));
tableHeaders.add(createTableHeaders(new String[]{ "uuid", "entity", "name", "value", "timestamp", "gallery", "rocks", "type", "location", "file", "picture", "video", "audio", "geometry", "username", "action" }));
tableHeaders.add(createTableHeaders(new String[]{ "uuid", "relationship", "name", "value", "timestamp", "gallery", "rocks", "type", "location", "file", "picture", "video", "audio", "geometry", "username", "action" }));

tableList = new ArrayList();
tableList.add(createOption("entity", "Fetch Entities"));
tableList.add(createOption("relationship", "Fetch Relationships"));
tableList.add(createOption("entity-pivot", "Fetch Entity Attributes"));
tableList.add(createOption("relationship-pivot", "Fetch Relationship Attributes"));

onEvent("tabgroup5", "load", "onLoadTable()");

onLoadTable() {
	populateDropDown("tabgroup5/tab1/queries", tableList);
}

onEvent("tabgroup5", "show", "refreshTable(\"tabgroup5/tab1/table\")");

onEvent("tabgroup5/tab1/load", "click", "onLoadQuery()");
onEvent("tabgroup5/tab1/top", "click", "onScrollTop()");
onEvent("tabgroup5/tab1/bottom", "click", "onScrollBottom()");
onEvent("tabgroup5/tab1/row", "click", "onScrollRow()");

onLoadQuery() {
	selectedItem = getFieldValue("tabgroup5/tab1/queries");
	
	index = getTableIndex(selectedItem);
	if (index < 0) return;

	headers = tableHeaders.get(index);
	query = tableQuery.get(index);
	if (index == 0) {
		populateTableRaw("tabgroup5/tab1/table", query, headers, "Show", 2, "onShowEntityRow()");
	} else if (index == 1) {
		populateTableRaw("tabgroup5/tab1/table", query, headers, "Show", 2, "onShowRelationshipRow()");
	} else if (index == 2) {
		populateTablePivot("tabgroup5/tab1/table", query, headers, "Show", 15, "onShowEntityRow()");
	} else if (index == 3) {
		populateTablePivot("tabgroup5/tab1/table", query, headers, "Show", 15, "onShowRelationshipRow()");
	}
}

onShowEntityRow() {
	row = getTableRow();
	value = getTableValue();

	tableEntityId = value;
	showTabGroup("tabgroup1", value);
}

onShowRelationshipRow() {
	row = getTableRow();
	value = getTableValue();

	tableRelationshipId = value;
	showTabGroup("tabgroup2", value);
}

getTableIndex(selectedItem) {
	for (int i = 0; i < tableList.size(); i++) {
		if (tableList.get(i).get(0).equals(selectedItem)) {
			return i;
		}
	}
	return -1;
}

onScrollTop() {
	scrollTableToTop("tabgroup5/tab1/table");
}

onScrollBottom() {
	scrollTableToBottom("tabgroup5/tab1/table");
}

onScrollRow() {
	value = getFieldValue("tabgroup5/tab1/scrollRow");
	row = 0;
	if (value != null && !"".equals(value)) {
		row = Integer.parseInt(value);
	}
	scrollTableToRow("tabgroup5/tab1/table", row);
}

// Bluetooth Test

onEvent("tabgroup6/tab1/auto", "click", "onBluetoothStartAuto()");
onEvent("tabgroup6/tab1/manual", "click", "onBluetoothStartManual()");
onEvent("tabgroup6/tab1/stop", "click", "onBluetoothStop()");
onEvent("tabgroup6/tab1/read", "click", "onBluetoothRead()");
onEvent("tabgroup6/tab1/write", "click", "onBluetoothWrite()");
onEvent("tabgroup6/tab1/clear", "click", "onBluetoothClear()");

messageBuffer = new ArrayList();
messageBufferSize = 5;
addMessage(message) {
	messageBuffer.add(message);
	if (messageBuffer.size() > messageBufferSize) {
		messageBuffer.remove(0);
	}
	value = "";
	for (i = 0; i < messageBuffer.size(); i++) {
		if (!value.isEmpty()) {
			value += "\n";
		}
		value += messageBuffer.get(i);
	}
	setFieldValue("tabgroup6/tab1/input", value);
}

onBluetoothStartAuto() {
	createBluetoothConnection("onBluetoothInput()", 1);
}

onBluetoothStartManual() {
	createBluetoothConnection("onBluetoothInput()", 0);
}

onBluetoothStop() {
	destroyBluetoothConnection();
}

onBluetoothRead() {
	readBluetoothMessage();
}

onBluetoothWrite() {
	writeBluetoothMessage(getFieldValue("tabgroup6/tab1/input"));
}

onBluetoothClear() {
	messageBuffer = new ArrayList();
	setFieldValue("tabgroup6/tab1/input", "");
	clearBluetoothMessages();
}

onBluetoothInput() {
	message = getBluetoothMessage();
	addMessage(message);
}
