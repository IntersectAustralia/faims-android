/*** MAP ***/

DATA_ENTRY_LAYER = "Data Entry Layer";
DATA_ENTRY_LAYER_ID = 0;

initStatic() {
	setFieldValue("control/static/name", getModuleName());
	setFieldValue("control/static/id", getModuleId());
	setFieldValue("control/static/season", getModuleSeason());
	setFieldValue("control/static/description", getProjectDescription());
	setFieldValue("control/static/permit_no", getPermitNo());
	setFieldValue("control/static/permit_holder", getPermitHolder());
	setFieldValue("control/static/contact_address", getContactAndAddress());
	setFieldValue("control/static/participants", getParticipants());
	setFieldValue("control/static/permit_issued_by", getPermitIssuedBy());
	setFieldValue("control/static/permit_type", getPermitType());
	setFieldValue("control/static/copyright_holder", getCopyrightHolder());
	setFieldValue("control/static/client_sponsor", getClientSponsor());
	setFieldValue("control/static/land_owner", getLandOwner());
	setFieldValue("control/static/has_sensitive_data", hasSensitiveData());
}

initStatic();

initMap() {
	setMapZoom("control/map/map", 19.0f);

	showBaseMap("control/map/map", "Base Layer", "files/data/maps/andes.tif");

    DATA_ENTRY_LAYER_ID = createCanvasLayer("control/map/map", DATA_ENTRY_LAYER);

	isEntity = true;
	queryName = "All entities";
	querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEntIdentifiers";
	addDatabaseLayerQuery("control/map/map", queryName, querySQL);

	addTrackLogLayerQuery("control/map/map", "track log entities", 
		"SELECT uuid, max(aenttimestamp) as aenttimestamp\n" + 
		" FROM archentity join aenttype using (aenttypeid)\n" +
		" where archentity.deleted is null\n" + 
		"   and lower(aenttypename) = lower('gps_track')\n" + 
		" group by uuid\n" + 
		" having max(aenttimestamp)");
		
	addSelectQueryBuilder("control/map/map", "Select entity by type", createQueryBuilder(
		"select uuid\n" + 
		"  from latestNonDeletedArchent\n" + 
		"  JOIN latestNonDeletedAentValue using (uuid)\n" + 
		"  join aenttype using (aenttypeid)\n" + 
		"  LEFT OUTER JOIN vocabulary using (vocabid, attributeid) \n" + 
		"  where lower(aenttypename) = lower(?) \n" + 
		"   group by uuid").addParameter("Type", "Structure"));
		
	addLegacySelectQueryBuilder("control/map/map", "Select geometry by id", "files/data/maps/sydney.sqlite", "Geology100_Sydney", 
		createLegacyQueryBuilder("Select PK_UID from Geology100_Sydney where PK_UID = ?").addParameter("ID", null));
					
	// define database layer styles for points, lines, polygons and text
	ps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
	ls = createLineStyle(10, Color.GREEN, 0.05f, 0.3f, null);
	pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
	ts = createTextStyle(10, Color.WHITE, 40, Typeface.SANS_SERIF);

	showDatabaseLayer("control/map/map", "Entity Layer", isEntity, queryName, querySQL, ps, ls, pos, ts);
}

initMap();

onEvent("control/map/clear", "click", "onClearMap()");
onEvent("control/map/create", "click", "onCreateMap()");

onClearMap() {
	clearGeometryList("control/map/map", getGeometryList("control/map/map", DATA_ENTRY_LAYER_ID));
}

onCreateMap() {
	List geomList = getGeometryList("control/map/map", DATA_ENTRY_LAYER_ID);
	if (geomList == null || geomList.size() == 0) {
		showWarning("Logic Error", "No geometry found on data entry layer");
	} else if (geomList.size() > 1) {
		showWarning("Logic Error", "Multiple geometry found on data entry layer. Please clear data entry layer and try again");
	} else {
		Geometry geom = geomList.get(0);
		
		if (geom instanceof Point) {
			showTabGroup("createPoint");
		} else if (geom instanceof Line) {
			showTabGroup("createLine");
		} else if (geom instanceof Polygon) {
			showTabGroup("createPolygon");
		}
		
	}
}

getCreatedGeometry() {
	return getGeometryList("control/map/map", DATA_ENTRY_LAYER_ID);
}

clearCreatedGeometry() {
	onClearMap();
}

/*** TRACK LOG ***/

setGPSUpdateInterval(4);

onEvent("control/gps/startTimeLog", "click", "startTrackingGPS(\"time\", 10, \"saveTimeGPSTrack()\")");
onEvent("control/gps/startDistanceLog", "click", "startTrackingGPS(\"distance\", 10, \"saveDistanceGPSTrack()\")");
onEvent("control/gps/stopTrackLog", "click", "stopTrackingGPS()");

saveTimeGPSTrack() {
	List attributes = createAttributeList();
	attributes.add(createEntityAttribute("gps_type", "time", null, null, null));
	saveGPSTrack(attributes);
}

saveDistanceGPSTrack() {
	List attributes = createAttributeList();
	attributes.add(createEntityAttribute("gps_type", "distance", null, null, null));
	saveGPSTrack(attributes);
}

saveGPSTrack(List attributes) {
	position = getGPSPosition();
	if (position == null) return;

	attributes.add(createEntityAttribute("gps_user", "" + user.getUserId(), null, null, null));
	attributes.add(createEntityAttribute("gps_timestamp", "" + getCurrentTime(), null, null, null));
	attributes.add(createEntityAttribute("gps_longitude", "" + position.getLongitude(), null, null, null));
	attributes.add(createEntityAttribute("gps_latitude", "" + position.getLatitude(), null, null, null));
	attributes.add(createEntityAttribute("gps_heading", "" + getGPSHeading(), null, null, null));
	attributes.add(createEntityAttribute("gps_accuracy", "" + getGPSEstimatedAccuracy(), null, null, null));
	
	positionProj = getGPSPositionProjected();
	Point p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
	ArrayList l = new ArrayList();
	l.add(p);
	
	saveArchEnt(null, "gps_track", l, attributes);
}

/*** MISC ***/

saveEntitiesToRel(type, entity1, entity2) {
	if (isNull(entity1) || isNull(entity2)) return;
	
	rel_id = saveRel(null, type, null, null);
	addReln(entity1, rel_id, null);
	addReln(entity2, rel_id, null);
}

makeVocab(String attrib){
    Object a = fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' ");
    return a;
}

makeGallery(String attrib){
    Object a = fetchAll("select vocabid, vocabname, pictureurl from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' order by vocabname" );
    return a;
}

/*** USER ***/

getDefaultUsersList() {
	users = fetchAll("select userid, fname ||' ' || lname from user");
	return users;
}

usersList = getDefaultUsersList();

populateListForUsers(){
    populateDropDown("user/tab1/users", getDefaultUsersList());
    populateList("user/tab1/devices", fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = 'Device' "));
}

populateListForUsers();

String username = "";
String device = "";
User user;

login(){
    if (!isNull(getFieldValue("user/tab1/devices"))){
	    Object userResult = fetchOne("select userid,fname,lname,email from user where userid='" + getFieldValue("user/tab1/users") + "';");
	    user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
	    deviceResult = fetchOne("select vocabname from vocabulary where vocabid = '"+getFieldValue("user/tab1/devices")+"';");
	    device = deviceResult.get(0);
	    setUser(user);
	    username = userResult.get(1) + " " + userResult.get(2);
	    showTabGroup("control");
	} else {
        showWarning("Logic Error", "Please Choose Device");
    }
}

onEvent("user/tab1/login", "click", "login()");

/*** SYNC ***/

onEvent("control/gps/connectexternal", "click", "startExternalGPS()");
onEvent("control/gps/connectinternal", "click", "startInternalGPS()");
onEvent("control/gps/startsync", "click", "startSync()");
onEvent("control/gps/stopsync", "click", "stopSync()");

setSyncMinInterval(10.0f);
setSyncMaxInterval(20.0f);
setSyncDelay(5.0f);

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);

}

/*** CONTROL ***/

newStructure(){
	structure_id = null;

    newTabGroup("structure");

    populateDropDown("structure/info/Preservation", makeVocab("Preservation"));
    populateDropDown("structure/info/Form", makeVocab("Form"));
    populateList("structure/component/WallsInternalPartition", makeVocab("WallsInternalPartition"));
    populateList("structure/info/ConstructionQuality", makeVocab("ConstructionQuality"));
    populateList("structure/info/ConstructionPeriod", makeVocab("ConstructionPeriod"));
    populateList("structure/info/Modifications", makeVocab("Modifications"));
    populateDropDown("structure/info/PrincipalFunction", makeVocab("PrincipalFunction"));
    populateDropDown("structure/info/Classification", makeVocab("Classification"));
    populateList("structure/info/StuccoInterior", makeVocab("StuccoInterior"));
    populateList("structure/info/StuccoExterior", makeVocab("StuccoExterior"));
    populateDropDown("structure/info/RoofForm", makeVocab("RoofForm"));

    setFieldValue("structure/info/Timestamp", getCurrentTime());
    setFieldValue("structure/info/Author", username);
    setFieldValue("structure/info/Device", device);
}

newCorner(){
	corner_id = null;

    newTabGroup("corner");
    
    populateDropDown("corner/cornerDetail/CornerExteriorForm", makeVocab("CornerExteriorForm"));
    populateDropDown("corner/cornerDetail/CornerInteriorForm", makeVocab("CornerInteriorForm"));
    populatePictureGallery("corner/cornerDetail/MasonryType", makeGallery("MasonryType"));
    
    populateList("corner/cornerDetail/InkaMasonry", makeVocab("InkaMasonry"));
    
    setFieldValue("corner/cornerDetail/Timestamp", getCurrentTime());
    setFieldValue("corner/cornerDetail/Author", username);
    setFieldValue("corner/cornerDetail/Device", device);
    recalcCorner();
    makeCornerNum();
}

newStructureWall(){
	structure_wall_id = null;

    newTabGroup("wall");
    
    populatePictureGallery("wall/structureWall/MasonryType", makeGallery("MasonryType"));
    populateList("wall/structureWall/InkaMasonry", makeVocab("InkaMasonry"));
    populateList("wall/structureWall/Gable", makeVocab("Gable"));
    populateList("wall/structureWall/WallHeightPreservation", makeVocab("WallHeightPreservation"));
    
    setFieldValue("wall/structureWall/Timestamp", getCurrentTime());
    setFieldValue("wall/structureWall/Author", username);
    setFieldValue("wall/structureWall/Device", device);
    
    makeStructureWallNum();
}

newDoorway(){
	doorway_id = null;

    newTabGroup("doorway");
    
    populateList("doorway/doorDetail/DoorMasonry", makeVocab("DoorMasonry"));
    populateList("doorway/doorDetail/DoorHeightPreservation", makeVocab("DoorHeightPreservation"));
    populateList("doorway/doorDetail/DoorPosition", makeVocab("DoorPosition"));
    
    setFieldValue("doorway/doorDetail/Timestamp", getCurrentTime());
    setFieldValue("doorway/doorDetail/Author", username);
    setFieldValue("doorway/doorDetail/Device", device);

    // set gps fields if geometry selected
	setDoorwayGPSFieldsFromPoint(getCreatedGeometry());
}

String niche_parent_id;
newNiche(parent_id, parent_string){
	niche_id = null;
    niche_parent_id = parent_id;

    newTabGroup("niche");
    
    populateList("niche/nicheDetail/NicheForm", makeVocab("NicheForm"));
    populateList("niche/nicheDetail/NicheHeightPreservation", makeVocab("NicheHeightPreservation"));
    populateList("niche/nicheDetail/NicheWidthLoc", makeVocab("NicheWidthLoc"));
    populateList("niche/nicheDetail/NicheAltar", makeVocab("NicheAltar"));
    
    setFieldValue("niche/nicheDetail/Timestamp", getCurrentTime());
    setFieldValue("niche/nicheDetail/Author", username);
    setFieldValue("niche/nicheDetail/Device", device);

    makeNicheNum(parent_id, parent_string);
}

String parent_window_id;
newWindow(parent_id, parent_string){
	window_id = null;
    parent_window_id = parent_id;

    newTabGroup("window");
    
    populateList("window/windowDetail/WindowHeightPreservation", makeVocab("WindowHeightPreservation"));
    
    setFieldValue("window/windowDetail/Timestamp", getCurrentTime());
    setFieldValue("window/windowDetail/Author", username);
    setFieldValue("window/windowDetail/Device", device);
    
    makeWindowNum(parent_id, parent_string);
}

newLichen(){
	lichen_id = null;

    newTabGroup("lichen");
    
    populateList("lichen/lichenDetail/Substrate", makeVocab("Substrate"));
    populatePictureGallery("lichen/lichenDetail/LichenQuality", makeGallery("LichenQuality"));
    populateList("lichen/lichenDetail/Aspect", makeVocab("Aspect"));
    populateList("lichen/lichenDetail/InsideOutside", makeVocab("InsideOutside"));
    
    setFieldValue("lichen/lichenDetail/Timestamp", getCurrentTime());
    setFieldValue("lichen/lichenDetail/Author", username);
    setFieldValue("lichen/lichenDetail/Device", device);

     // set gps fields if geometry selected
	setLichenGPSFieldsFromPoint(getCreatedGeometry());
}

newFreeWall(){
	wall_id = null;

    newTabGroup("freeWall");
    
    populatePictureGallery("freeWall/freeWallDetail/MasonryType", makeGallery("MasonryType"));
    populateList("freeWall/freeWallDetail/WallClass", makeVocab("WallClass"));
    populateList("freeWall/freeWallDetail/WallPreservation", makeVocab("WallPreservation"));
    populateList("freeWall/freeWallDetail/WallHeightPreservation", makeVocab("WallHeightPreservation"));
    
    setFieldValue("freeWall/freeWallDetail/Timestamp", getCurrentTime());
    setFieldValue("freeWall/freeWallDetail/Author", username);
    setFieldValue("freeWall/freeWallDetail/Device", device);
}

newFeature(){
	feature_id = null;

    newTabGroup("feature");
    
    setFieldValue("feature/featureDetail/Timestamp", getCurrentTime());
    setFieldValue("feature/featureDetail/Author", username);
    setFieldValue("feature/featureDetail/Device", device);
}

newSpecialFind(){
	special_find_id = null;

    newTabGroup("specialFind");
    
    populateList("specialFind/findDetail/Type", makeVocab("Type"));
    
    setFieldValue("specialFind/findDetail/Timestamp", getCurrentTime());
    setFieldValue("specialFind/findDetail/Author", username);
    setFieldValue("specialFind/findDetail/Device", device);
}

newSurfaceCollection(){
	surface_collection_id = null;

    newTabGroup("surfaceCollection");
    
    populateList("surfaceCollection/description/SurfaceCollectionContext", makeVocab("SurfaceCollectionContext"));
    populateList("surfaceCollection/material/DiagnosticsPresent", makeVocab("DiagnosticsPresent"));
    populateList("surfaceCollection/material/MaterialDensity", makeVocab("MaterialDensity"));
    populateList("surfaceCollection/material/LotLabPriority", makeVocab("LotLabPriority"));
    
    setFieldValue("surfaceCollection/description/Timestamp", getCurrentTime());
    setFieldValue("surfaceCollection/description/Author", username);
    setFieldValue("surfaceCollection/description/Device", device);
}

newLot(){
	lot_id = null;

    newTabGroup("lot");
    
    populateList("lot/lotDetail/Material", makeVocab("Material"));
    
    setFieldValue("lot/lotDetail/Timestamp", getCurrentTime());
    setFieldValue("lot/lotDetail/Author", username);
    setFieldValue("lot/lotDetail/Device", device);
}

newCanal(){
	canal_id = null;

    newTabGroup("canal");
    
    setFieldValue("canal/canalDetail/Timestamp", getCurrentTime());
    setFieldValue("canal/canalDetail/Author", username);
    setFieldValue("canal/canalDetail/Device", device);
}

onEvent("createPolygon/tab1/structure", "click", "newStructure()");
onEvent("createLine/tab1/wall", "click", "newFreeWall()");
onEvent("createPoint/tab1/doorway", "click", "newDoorway()");
onEvent("createPolygon/tab1/feature", "click", "newFeature()");
onEvent("createPoint/tab1/specialFind", "click", "newSpecialFind()");
onEvent("createPoint/tab1/lichen", "click", "newLichen()");
onEvent("createPolygon/tab1/surfaceCollection", "click", "newSurfaceCollection()");
onEvent("createLine/tab1/canal", "click", "newCanal()");


onEvent("structure/component/AddCorner", "click", "newCorner()");
onEvent("structure/component/AddWall", "click", "newStructureWall()");
onEvent("structure/component/AddDoorway", "click", "newDoorway()");
onEvent("wall/structureWall/NewNiche", "delayclick", "newStructureWallNiche(structure_wall_id)");
onEvent("wall/structureWall/NewWindow", "click", "newStructureWindow(structure_wall_id)");
onEvent("wall/structureWall/NewLichen", "click", "newLichen()");
onEvent("corner/cornerDetail/AddNiche", "click", "newCornerNiche(corner_id)");
onEvent("surfaceCollection/material/Lot", "click", "newLot()");
onEvent("structure", "show", "recalcComponents()");
onEvent("wall/structureWall", "show", "duplicateEAID()");
onEvent("structure/component", "show", "recalcComponents()");
onEvent("structure/component", "show", "duplicateEAID()");
onEvent("structure/final", "show", "duplicateEAID()");

newStructureWindow(id){
    saveStructureWall(id,"onNewStructureWindowCreated()");
}

onNewStructureWindowCreated(){
	structure_wall_id = getLastSavedRecordId();
	saveEntitiesToRel("SurfaceLot", structure_id, structure_wall_id);
	newWindow(structure_wall_id,  getFieldValue("wall/structureWall/WallID"));
}

newStructureWallNiche(id){
    saveStructureWall(id,"onNewStructureWallNicheCreated()");
}

onNewStructureWallNicheCreated(){
	structure_wall_id = getLastSavedRecordId();
	
	saveEntitiesToRel("SurfaceLot", structure_id, structure_wall_id);
	newNiche(structure_wall_id, getFieldValue("wall/structureWall/WallID"));
}

newCornerNiche(id){
    saveCorner(id, "onNewCornerNicheCreated()");
}

onNewCornerNicheCreated(){
	corner_id = getLastSavedRecordId();
	
	saveEntitiesToRel("StructureContains", structure_id, corner_id);
	newNiche(corner_id, getFieldValue("corner/cornerDetail/CornerID"));
}

recalcComponents(){
    if (!isNull(structure_id)){
         Object windowNum = fetchOne(""+
"select count(distinct relationshipid) "+
"from aentreln join relationship using (relationshipid) "+
"join relntype using (relntypeid) "+
"join archentity using (uuid) join (select uuid, max(aenttimestamp) as aenttimestamp from archentity group by uuid) using (uuid, aenttimestamp) "+
"where uuid in (select uuid "+
"                 from aentreln join (select relationshipid "+
"                                      from aentreln join (select uuid, relationshipid, max(aentrelntimestamp) as aentrelntimestamp "+
"                                                            from aentreln "+
"                                                        group by uuid, relationshipid) using (uuid, relationshipid, aentrelntimestamp) "+
"                                     where uuid ="+structure_id+" "+
"                                  group by relationshipid) using (relationshipid) "+
"               where uuid !="+structure_id+" "+
"                 and deleted is null) "+
"and relntypename = 'WindowIn' "+
"and archentity.deleted is null; ");
        Object structureWallNum = fetchOne("select count(distinct uuid) "+
                    " from (select uuid, relationshipid, deleted "+
                    "        from aentreln join (select uuid, relationshipid, max(aentrelntimestamp) as aentrelntimestamp "+
                    "                             from aentreln "+
                    "                             group by uuid, relationshipid) using (uuid, relationshipid, aentrelntimestamp) "+
                    "        group by uuid, relationshipid ) a "+
                    "join archentity using (uuid) JOIN (select uuid, max(aenttimestamp) as aenttimestamp from archentity group by uuid) using (uuid, aenttimestamp) "+
                    "join aenttype using (aenttypeid) "+
                    "where relationshipid in (select relationshipid "+
                    "                          from aentreln "+
                    "                          where uuid = "+structure_id+") "+
                    "and aenttypename = 'StructureWall' "+
                    "and a.deleted is null "+
                    "and archentity.deleted is null "+
                    "and uuid != "+structure_id+"; ");
         Object nicheNum = fetchOne(""+
"select count(distinct relationshipid) "+
"from aentreln join relationship using (relationshipid) "+
"join relntype using (relntypeid) "+
"join archentity using (uuid) join (select uuid, max(aenttimestamp) as aenttimestamp from archentity group by uuid) using (uuid, aenttimestamp) "+
"where uuid in (select uuid "+
"                 from aentreln join (select relationshipid "+
"                                      from aentreln join (select uuid, relationshipid, max(aentrelntimestamp) as aentrelntimestamp "+
"                                                            from aentreln "+
"                                                        group by uuid, relationshipid) using (uuid, relationshipid, aentrelntimestamp) "+
"                                     where uuid ="+structure_id+" "+
"                                  group by relationshipid) using (relationshipid) "+
"               where uuid !="+structure_id+" "+
"                 and deleted is null) "+
"and relntypename = 'NicheIn' "+
"and archentity.deleted is null; ");
         Object doorwayNum = fetchOne(""+
"select count(distinct relationshipid) "+
"from aentreln join relationship using (relationshipid) "+
"join relntype using (relntypeid) "+
"join archentity using (uuid) join (select uuid, max(aenttimestamp) as aenttimestamp from archentity group by uuid) using (uuid, aenttimestamp) "+
"where uuid in (select uuid "+
"                 from aentreln join (select relationshipid "+
"                                      from aentreln join (select uuid, relationshipid, max(aentrelntimestamp) as aentrelntimestamp "+
"                                                            from aentreln "+
"                                                        group by uuid, relationshipid) using (uuid, relationshipid, aentrelntimestamp) "+
"                                     where uuid ="+structure_id+" "+
"                                  group by relationshipid) using (relationshipid) "+
"               where uuid !="+structure_id+" "+
"                 and deleted is null) "+
"and relntypename = 'DoorwayIn' "+
"and archentity.deleted is null; ");


    setFieldValue("structure/component/WindowCount", Integer.valueOf(windowNum.get(0)));
    setFieldValue("structure/component/DoorwayCount", Integer.valueOf(doorwayNum.get(0)));
    setFieldValue("structure/component/NicheCount", Integer.valueOf(nicheNum.get(0)));
    setFieldValue("structure/component/WallsTotalCount", Integer.valueOf(structureWallNum.get(0)));
    }

}

/*** CORNER ***/

String corner_id = null;

onEvent("corner/cornerDetail/CornerPhotos", "click", "attachPictureTo(\"corner/cornerDetail/PhotoGallery\")");

onEvent("corner/cornerDetail/Duplicate", "delayclick", "duplicateCorner(corner_id,\"onDuplicateCornerSaved()\")");
onEvent("corner/cornerDetail/Update", "delayclick", "saveCorner(corner_id,\"onCornerSaved()\")");
onEvent("corner/cornerDetail/Update2", "delayclick", "saveCorner(corner_id,\"onCornerSaved()\")");
onEvent("corner/cornerDetail/Delete", "click", "deleteCorner()");
onEvent("corner", "show", "recalcCorner()");
onEvent("corner/cornerDetail", "show", "duplicateEAID()");

saveCorner(id, callback) {
	if (isNull(getFieldValue("corner/cornerDetail/CornerID"))) {
		showWarning("Logic Error", "Cannot save record without id");
		return;
	}
	updateCorner(id, callback);
	duplicateEAID();
}

duplicateCorner(id, callback) {
    saveCorner(id, callback);
}

onDuplicateCornerSaved(){
	corner_id = getLastSavedRecordId();
	
    saveEntitiesToRel("StructureContains", structure_id, corner_id);
    
    showTabGroup("corner", corner_id);
    corner_id = null;
    makeCornerNum();
}

makeCornerNum(){
	if (!isNull(structure_id)){
	    cornerNum = fetchOne("select count(distinct uuid)+1 "+
	                    " from (select uuid, relationshipid, deleted "+
	                    "        from aentreln join (select uuid, relationshipid, max(aentrelntimestamp) as aentrelntimestamp "+
	                    "                             from aentreln "+
	                    "                             group by uuid, relationshipid) using (uuid, relationshipid, aentrelntimestamp) "+
	                    "        group by uuid, relationshipid ) a "+
	                    "join archentity using (uuid) JOIN (select uuid, max(aenttimestamp) as aenttimestamp from archentity group by uuid) using (uuid, aenttimestamp) "+
	                    "join aenttype using (aenttypeid) "+
	                    "where relationshipid in (select relationshipid "+
	                    "                          from aentreln "+
	                    "                          where uuid = "+structure_id+") "+
	                    "and aenttypename = 'Corner' "+
	                    "and a.deleted is null "+
	                    "and archentity.deleted is null "+
	                    "and uuid != "+structure_id+"; ");
	
	    setFieldValue("corner/cornerDetail/CornerID", getFieldValue("structure/info/ArchaeologicalElementID") + " Corner: " + cornerNum.get(0));
	}
}

deleteCorner(){
	if (!isNull(corner_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Corner!", "reallyDeleteCorner()", "doNotDelete()");
	}
}

reallyDeleteCorner(){
    deleteArchEnt(corner_id);
    cancelTabGroup("corner", false);
}

updateCorner(id, callback) {
	if (isNull(id)) id = null;

    if (isNull(structure_id)) {
  		showWarning("Logic Error", "Corner cannot be saved as parent structure is not saved or loaded.");
   	} else {
   		saveTabGroup("corner", id, null, null, callback);
	}
}

onCornerSaved() {
	corner_id = getLastSavedRecordId();
	
    saveEntitiesToRel("StructureContains", structure_id, corner_id);
    
    showTabGroup("corner", corner_id);
    recalcCorner();
}

recalcCorner(){
    if (!isNull(corner_id)){
        Object nicheNum = fetchOne("select count(distinct uuid) "+
                    " from (select uuid, relationshipid, deleted "+
                    "        from aentreln join (select uuid, relationshipid, max(aentrelntimestamp) as aentrelntimestamp "+
                    "                             from aentreln "+
                    "                             group by uuid, relationshipid) using (uuid, relationshipid, aentrelntimestamp) "+
                    "        group by uuid, relationshipid ) a "+
                    "join archentity using (uuid) JOIN (select uuid, max(aenttimestamp) as aenttimestamp from archentity group by uuid) using (uuid, aenttimestamp) "+
                    "join aenttype using (aenttypeid) "+
                    "where relationshipid in (select relationshipid "+
                    "                          from aentreln "+
                    "                          where uuid = "+corner_id+") "+
                    "and aenttypename = 'Niche' "+
                    "and a.deleted is null "+
                    "and archentity.deleted is null "+
                    "and uuid != "+corner_id+"; ");

    	setFieldValue("corner/cornerDetail/NicheCount", Integer.valueOf(nicheNum.get(0)));
    }
}

/*** NICHE ***/

String niche_id = null;

onEvent("niche/nicheDetail/NichePhotos", "click", "attachPictureTo(\"niche/nicheDetail/PhotoGallery\")");

onEvent("niche/nicheDetail/Update", "delayclick", "saveNiche(niche_id)");
onEvent("niche/nicheDetail/Update2", "delayclick", "saveNiche(niche_id)");
onEvent("niche/nicheDetail/Delete", "click", "deleteNiche()");

onEvent("niche/nicheDetail/AssociateWith", "click", "associateWithNiche()");

associateWithNiche() {
	id = getFieldValue("niche/nicheDetail/AssociateWithList");
	type = "NicheIn";
	if (isNull(id)) {
		showWarning("Logic Error", "Please select an id to associate with");
		return;
	}
	if (isNull(type)) {
		showWarning("Logic Error", "Please select a type to associate with");
		return;
	}
	if (isNull(niche_id)) {
		showWarning("Logic Error", "Please save record before associating with");
		return;
	}
	saveEntitiesToRel(type, niche_id, id);
	showToast("Successfuly associated.");
}

saveNiche(id) {
	if (isNull(getFieldValue("niche/nicheDetail/NicheID"))) {
		showWarning("Logic Error", "Cannot save record without id");
		return;
	}
    if (isNull(niche_parent_id)) {
        showWarning("Logic Error", "Something went wrong with creating this niche. Go back to the previous screen and try again.");
        return;
    }

	updateNiche(id);
}

deleteNiche(){
	if (!isNull(niche_id)) {
		showAlert("Confirm Deletion", "Press OK to Delete this Niche!", "reallyDeleteNiche()", "doNotDelete()");
	}
}

reallyDeleteNiche(){
    deleteArchEnt(niche_id);
    cancelTabGroup("niche", false);
}

updateNiche(id) {
	if (isNull(id)) id = null;

    // TODO update the niche count in structure wall and niches recorded in the structure
    saveTabGroup("niche", id, null, null, "onNicheSaved()");
}

onNicheSaved() {
	niche_id = getLastSavedRecordId();
	
    showTabGroup("niche", niche_id);
    duplicateEAID();
}

makeWindowNum(parent_id, parent_string){
	System.out.println("parent_id = " + parent_id + ", parent_string = " + parent_string);
    if (!isNull(parent_id)){
    	fooNum = fetchOne("select count(distinct uuid)+1 "+
                    " from (select uuid, relationshipid, deleted "+
                    "        from aentreln join (select uuid, relationshipid, max(aentrelntimestamp) as aentrelntimestamp "+
                    "                             from aentreln "+
                    "                             group by uuid, relationshipid) using (uuid, relationshipid, aentrelntimestamp) "+
                    "        group by uuid, relationshipid ) a "+
                    "join archentity using (uuid) JOIN (select uuid, max(aenttimestamp) as aenttimestamp from archentity group by uuid) using (uuid, aenttimestamp) "+
                    "join aenttype using (aenttypeid) "+
                    "where relationshipid in (select relationshipid "+
                    "                          from aentreln "+
                    "                          where uuid = "+parent_id+") "+
                    "and aenttypename = 'Window' "+
                    "and a.deleted is null "+
                    "and archentity.deleted is null "+
                    "and uuid != "+parent_id+"; ");

    	setFieldValue("window/windowDetail/WindowID", parent_string + " Window: " +fooNum.get(0));
    }
}

makeNicheNum(parent_id, parent_string){
    if (!isNull(parent_id)){
    	fooNum = fetchOne("select count(distinct uuid)+1 "+
                    " from (select uuid, relationshipid, deleted "+
                    "        from aentreln join (select uuid, relationshipid, max(aentrelntimestamp) as aentrelntimestamp "+
                    "                             from aentreln "+
                    "                             group by uuid, relationshipid) using (uuid, relationshipid, aentrelntimestamp) "+
                    "        group by uuid, relationshipid ) a "+
                    "join archentity using (uuid) JOIN (select uuid, max(aenttimestamp) as aenttimestamp from archentity group by uuid) using (uuid, aenttimestamp) "+
                    "join aenttype using (aenttypeid) "+
                    "where relationshipid in (select relationshipid "+
                    "                          from aentreln "+
                    "                          where uuid = "+parent_id+") "+
                    "and aenttypename = 'Niche' "+
                    "and a.deleted is null "+
                    "and archentity.deleted is null "+
                    "and uuid != "+parent_id+"; ");

    	setFieldValue("niche/nicheDetail/NicheID", parent_string + " Niche: " +fooNum.get(0));
    }
}

/*** CANAL ***/

String canal_id = null;

onEvent("canal/canalDetail/Photos", "click", "attachPictureTo(\"canal/canalDetail/PhotoGallery\")");

onEvent("canal/canalDetail/Update", "delayclick", "saveCanal(canal_id)");
onEvent("canal/canalDetail/Update2", "delayclick", "saveCanal(canal_id)");
onEvent("canal/canalDetail/Delete", "click", "deleteCanal()");

deleteCanal(){
	if (!isNull(canal_id)) {
		showAlert("Confirm Deletion", "Press OK to Delete this Niche!", "reallyDeleteCanal()", "doNotDelete()");

	}
}

reallyDeleteCanal(){
    deleteArchEnt(canal_id);
    cancelTabGroup("canal", false);
}

saveCanal(id) {
	if ((id == null && getCreatedGeometry() == null) ||
		isNull(getFieldValue("canal/canalDetail/CanalID"))) {

		showWarning("Logic Error", "Cannot save record without geometry or id");
		return;
	}
	
	updateCanal(id);
	clearCreatedGeometry();
}

updateCanal(id) {
	if (isNull(id)) id = null;
	
	data = getCreatedGeometry();
	if (!isNull(id)) {
		entity = fetchArchEnt(id);
		if (entity != null) {
			data = entity.getGeometryList();
		}
	}
	
	saveTabGroup("canal", id, data, null, "onCanalSaved()");
}

onCanalSaved() {
	canal_id = getLastSavedRecordId();
	
    showTabGroup("canal", canal_id);
}

/*** WINDOW ***/

String window_id = null;

onEvent("window/windowDetail/WindowPhotos", "click", "attachPictureTo(\"window/windowDetail/PhotoGallery\")");

onEvent("window/windowDetail/Update", "delayclick", "saveWindow(window_id)");
onEvent("window/windowDetail/Update2", "delayclick", "saveWindow(window_id)");
onEvent("window/windowDetail/Delete", "click", "deleteWindow()");

onEvent("window/windowDetail/AssociateWith", "click", "associateWithWindow()");
onEvent("window/windowDetail", "show", "duplicateEAID()");

associateWithWindow() {
	id = getFieldValue("window/windowDetail/AssociateWithList");
	if (isNull(id)) {
		showWarning("Logic Error", "Please select an id to associate with");
		return;
	}
	if (isNull(window_id)) {
		showWarning("Logic Error", "Please save record before associating with");
		return;
	}
	saveEntitiesToRel("WindowIn", window_id, id);
	showToast("Successfuly associated.");
}

saveWindow(id) {
	if (isNull(getFieldValue("window/windowDetail/WindowID"))) {
		showWarning("Logic Error", "Cannot save record without id");
		return;
	}
	updateWindow(id);
}

deleteWindow(){
	if (!isNull(window_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Window!", "reallyDeleteWindow()", "doNotDelete()");
	}
}

reallyDeleteWindow(){
    deleteArchEnt(window_id);
    cancelTabGroup("window", false);
}

updateWindow(id) {
	if (isNull(id)) id = null;
	
	saveTabGroup("window", id, null, null, "onWindowSaved()");
}

onWindowSaved() {
	window_id = getLastSavedRecordId();
	
    showTabGroup("window", window_id);
}

/*** SPECIAL FIND ***/

String special_find_id = null;

onEvent("specialFind/findDetail/Photos", "click", "attachPictureTo(\"specialFind/findDetail/PhotoGallery\")");

onEvent("specialFind/findDetail/Update", "delayclick", "saveSpecialFind(special_find_id)");
onEvent("specialFind/findDetail/Update2", "delayclick", "saveSpecialFind(special_find_id)");
onEvent("specialFind/findDetail/Delete", "click", "deleteSpecialFind()");

onEvent("specialFind/findDetail/AssociateWith", "click", "associateWithSpecialFind()");

associateWithSpecialFind() {
    id = getFieldValue("specialFind/findDetail/AssociateWithList");
    type = "StructureContains";
    if (isNull(id)) {
        showWarning("Logic Error", "Please select an id to associate with");
        return;
    }
    if (isNull(type)) {
        showWarning("Logic Error", "Please select a type to associate with");
        return;
    }
    if (isNull(special_find_id)) {
        showWarning("Logic Error", "Please save record before associating with");
        return;
    }
    saveEntitiesToRel(type, special_find_id, id);
    showToast("Successfuly associated.");
}

deleteSpecialFind(){
	if (!isNull(special_find_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Special Find!", "reallyDeleteSpecialFind()", "doNotDelete()");
	}
}

reallyDeleteSpecialFind(){
    deleteArchEnt(special_find_id);
    cancelTabGroup("specialFind", false);
}

saveSpecialFind(id) {
	if ((id == null && getCreatedGeometry() == null) ||
		isNull(getFieldValue("specialFind/findDetail/SpecialFindID"))) {

		showWarning("Logic Error", "Cannot save record without geometry or id");
		return;
	}
	updateSpecialFind(id);
	clearCreatedGeometry();
}

updateSpecialFind(id) {
	if (isNull(id)) id = null;
	
	data = getCreatedGeometry();
	if (!isNull(id)) {
		entity = fetchArchEnt(id);
		if (entity != null) {
			data = entity.getGeometryList();
		}
	}
	
	saveTabGroup("specialFind", id, data, null, "onSpecialFindSaved()");
}

onSpecialFindSaved() {
	special_find_id = getLastSavedRecordId();
	
    showTabGroup("specialFind", special_find_id);
}

/*** FEATURES ***/

String feature_id = null;

onEvent("feature/featureDetail/Photos", "click", "attachPictureTo(\"feature/featureDetail/PhotoGallery\")");

onEvent("feature/featureDetail/Update", "delayclick", "saveFeature(feature_id)");
onEvent("feature/featureDetail/Update2", "delayclick", "saveFeature(feature_id)");
onEvent("feature/featureDetail/Delete", "click", "deleteFeature()");

onEvent("feature/featureDetail/AssociateWith", "click", "associateWithFeature()");

associateWithFeature() {
    id = getFieldValue("feature/featureDetail/AssociateWithList");
    type = "StructureContains";
    if (isNull(id)) {
        showWarning("Logic Error", "Please select an id to associate with");
        return;
    }
    if (isNull(type)) {
        showWarning("Logic Error", "Please select a type to associate with");
        return;
    }
    if (isNull(feature_id)) {
        showWarning("Logic Error", "Please save record before associating with");
        return;
    }
    saveEntitiesToRel(type, feature_id, id);
    showToast("Successfuly associated.");
}

deleteFeature(){
	if (!isNull(feature_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Feature!", "reallyDeleteFeature()", "doNotDelete()");
	}
}

reallyDeleteFeature(){
    deleteArchEnt(feature_id);
    cancelTabGroup("feature", false);
}

saveFeature(id) {
	if ((id == null && getCreatedGeometry() == null) ||
		isNull(getFieldValue("feature/featureDetail/FeatureID"))) {

		showWarning("Logic Error", "Cannot save record without geometry or id");
		return;
	}
	updateFeature(id);
	clearCreatedGeometry();
}

updateFeature(id) {
	if (isNull(id)) id = null;
	
	data = getCreatedGeometry();
	if (!isNull(id)) {
		entity = fetchArchEnt(id);
		if (entity != null) {
			data = entity.getGeometryList();
		}
	}
	
    saveTabGroup("feature", id, data, null, "onFeatureSaved()");
}

onFeatureSaved() {
	feature_id = getLastSavedRecordId();
	
    showTabGroup("feature", feature_id);
}

/*** FREEWALL ***/

String wall_id = null;

onEvent("freeWall/freeWallDetail/Photos", "click", "attachPictureTo(\"freeWall/freeWallDetail/PhotoGallery\")");

onEvent("freeWall/freeWallDetail/Update", "delayclick", "saveFreeWall(wall_id)");
onEvent("freeWall/freeWallDetail/Update2", "delayclick", "saveFreeWall(wall_id)");
onEvent("freeWall/freeWallDetail/Delete", "click", "deleteFreeWall()");

onEvent("freeWall/freeWallDetail/AssociateWith", "click", "associateWithFreeWall()");

associateWithFreeWall() {
    id = getFieldValue("freeWall/freeWallDetail/AssociateWithList");
    type = "WallWith";
    if (isNull(id)) {
        showWarning("Logic Error", "Please select an id to associate with");
        return;
    }
    if (isNull(type)) {
        showWarning("Logic Error", "Please select a type to associate with");
        return;
    }
    if (isNull(wall_id)) {
        showWarning("Logic Error", "Please save record before associating with");
        return;
    }
    saveEntitiesToRel(type, wall_id, id);
    showToast("Successfuly associated.");
}

deleteFreeWall(){
	if (!isNull(wall_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Free Wall!", "reallyDeleteFreeWall()", "doNotDelete()");
	}
}

reallyDeleteFreeWall(){
    deleteArchEnt(wall_id);
    cancelTabGroup("freeWall", false);
}

saveFreeWall(id) {
	if ((id == null && getCreatedGeometry() == null) ||
		isNull(getFieldValue("freeWall/freeWallDetail/WallID"))) {

		showWarning("Logic Error", "Cannot save record without geometry or id");
		return;
	}
	updateFreeWall(id);
	clearCreatedGeometry();
}

updateFreeWall(id) {
	if (isNull(id)) id = null;
	
	data = getCreatedGeometry();
	if (!isNull(id)) {
		entity = fetchArchEnt(id);
		if (entity != null) {
			data = entity.getGeometryList();
		}
	}
	
    saveTabGroup("freeWall", id, data, null, "onFreeWallSaved()");
}

onFreeWallSaved() {
	wall_id = getLastSavedRecordId();
	
    showTabGroup("freeWall", wall_id);
}

/*** DOORWAY ***/

String doorway_id = null;

onEvent("doorway/doorDetail/DoorPhotos", "click", "attachPictureTo(\"doorway/doorDetail/PhotoGallery\")");

takeDoorywayPoint(){
    location = getGPSPositionProjected();
    if (location == null) {
        showWarning("Logic Error", "No GPS Signal");
    } else {
        longitude = location.getLongitude();
        latitude = location.getLatitude();

        setFieldValue("doorway/doorDetail/GPSLong", longitude);
        setFieldValue("doorway/doorDetail/GPSLat", latitude);

        point = createPoint(longitude, latitude);

        // TODO make this reflect db layer when saving with db.
        lastPointId = drawPoint("tabgroup1/tab1/map", entityLayerId, point, gpsPointStyle(Color.RED));

    }
}
onEvent("doorway/doorDetail/TakePoint", "click", "takeDoorywayPoint()");

onEvent("doorway/doorDetail/Update", "delayclick", "saveDoorway(doorway_id)");
onEvent("doorway/doorDetail/Update2", "delayclick", "saveDoorway(doorway_id)");
onEvent("doorway/doorDetail/Delete", "click", "deleteDoorway()");

onEvent("doorway/doorDetail/AssociateWith", "click", "associateWithDoorway()");

associateWithDoorway() {
    id = getFieldValue("doorway/doorDetail/AssociateWithList");
    type = "DoorwayIn";
    if (isNull(id)) {
        showWarning("Logic Error", "Please select an id to associate with");
        return;
    }
    if (isNull(type)) {
        showWarning("Logic Error", "Please select a type to associate with");
        return;
    }
    if (isNull(doorway_id)) {
        showWarning("Logic Error", "Please save record before associating with");
        return;
    }
    saveEntitiesToRel(type, doorway_id, id);
    showToast("Successfuly associated.");
}

deleteDoorway(){
	if (!isNull(doorway_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Doorway!", "reallyDeleteDoorway()", "doNotDelete()");
	}
}

reallyDeleteDoorway(){
    deleteArchEnt(doorway_id);
    cancelTabGroup("doorway", false);
}

saveDoorway(id) {
	noGPSGeom = isNull(getFieldValue("doorway/doorDetail/GPSLong")) || isNull(getFieldValue("doorway/doorDetail/GPSLat"));
	if (id == null && (getCreatedGeometry() == null && noGPSGeom) ||
		isNull(getFieldValue("doorway/doorDetail/DoorID"))) {

		showWarning("Logic Error", "Cannot save record without geometry or id");
		return;
	}
	updateDoorway(id);
	clearCreatedGeometry();
}

updateDoorway(id) {
	if (isNull(id)) id = null;
	
	data = new ArrayList();
	data.add(new Point(new MapPos(Double.parseDouble(getFieldValue("doorway/doorDetail/GPSLong")),Double.parseDouble(getFieldValue("doorway/doorDetail/GPSLat"))), null, (PointStyle) null, null));
	
    saveTabGroup("doorway", id, data, null, "onDoorwaySaved()");
}

onDoorwaySaved() {
	doorway_id = getLastSavedRecordId();
	
    showTabGroup("doorway", doorway_id);
    setDoorwayGPSFields(doorway_id);
}

/*** LICHEN ***/

String lichen_id = null;

onEvent("lichen/lichenDetail/Photos", "click", "attachPictureTo(\"lichen/lichenDetail/PhotoGallery\")");

takeLichenPoint(){
    location = getGPSPositionProjected();
    if (location == null) {
        showWarning("Logic Error", "No GPS Signal");
    } else {
        longitude = location.getLongitude();
        latitude = location.getLatitude();

        setFieldValue("lichen/lichenDetail/GPSLong", longitude);
        setFieldValue("lichen/lichenDetail/GPSLat", latitude);

        point = createPoint(longitude, latitude);

        // TODO make this reflect db layer when saving with db.
        lastPointId = drawPoint("tabgroup1/tab1/map", entityLayerId, point, gpsPointStyle(Color.RED));

    }
}

onEvent("lichen/lichenDetail/TakePoint", "click", "takeLichenPoint()");

onEvent("lichen/lichenDetail/Update", "delayclick", "saveLichen(lichen_id)");
onEvent("lichen/lichenDetail/Update2", "delayclick", "saveLichen(lichen_id)");
onEvent("lichen/lichenDetail/Delete", "click", "deleteLichen()");

onEvent("lichen/lichenDetail/AssociateWith", "click", "associateWithLichen()");

associateWithLichen() {
    id = getFieldValue("lichen/lichenDetail/AssociateWithList");
    type = "LichenAttachedTo";
    if (isNull(id)) {
        showWarning("Logic Error", "Please select an id to associate with");
        return;
    }
    if (isNull(type)) {
        showWarning("Logic Error", "Please select a type to associate with");
        return;
    }
    if (isNull(lichen_id)) {
        showWarning("Logic Error", "Please save lichen before associating with");
        return;
    }
    saveEntitiesToRel(type, lichen_id, id);

    showToast("Successfuly associated.");
}

deleteLichen(){
	if (!isNull(lichen_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Lichen!", "reallyDeleteLichen()", "doNotDelete()");
	}
}

reallyDeleteLichen(){
    deleteArchEnt(lichen_id);
    cancelTabGroup("lichen", false);
}

saveLichen(id) {
	noGPSGeom = isNull(getFieldValue("lichen/lichenDetail/GPSLong")) || isNull(getFieldValue("lichen/lichenDetail/GPSLat"));
	if ((id == null && getCreatedGeometry() == null && noGPSGeom) ||
		isNull(getFieldValue("lichen/lichenDetail/LichenID"))) {

		showWarning("Logic Error", "Cannot save record without geometry or id");
		return;
	}
	updateLichen(id);
	clearCreatedGeometry();
}

updateLichen(id) {
	if (isNull(id)) id = null;
	
	data = new ArrayList();
	data.add(new Point(new MapPos(Double.parseDouble(getFieldValue("lichen/lichenDetail/GPSLong")),Double.parseDouble(getFieldValue("lichen/lichenDetail/GPSLat"))), null, (PointStyle) null, null));
	
    saveTabGroup("lichen", id, data, null, "onLichenSaved()");
}

onLichenSaved() {
	lichen_id = getLastSavedRecordId();
	
    showTabGroup("lichen", lichen_id);
    setLichenGPSFields(lichen_id);
}

/*** SURFACE COLLECTION ***/

String surface_collection_id = null;

onEvent("surfaceCollection/material/Update", "delayclick", "saveSurfaceCollection(surface_collection_id)");
onEvent("surfaceCollection/material/Update2", "delayclick", "saveSurfaceCollection(surface_collection_id)");
onEvent("surfaceCollection/description/Update", "delayclick", "saveSurfaceCollection(surface_collection_id)");
onEvent("surfaceCollection/description/Update2", "delayclick", "saveSurfaceCollection(surface_collection_id)");
onEvent("surfaceCollection/material/Delete", "click", "deleteSurfaceCollection()");

//TODO Make automatic lot association

saveSurfaceCollection(id) {
	if ((id == null && getCreatedGeometry() == null) ||
		isNull(getFieldValue("surfaceCollection/description/SurfaceCollectionID"))) {

		showWarning("Logic Error", "Cannot save record without geometry or id");
		return;
	}
	updateSurfaceCollection(id);
	clearCreatedGeometry();
}

deleteSurfaceCollection(){
	if (!isNull(surface_collection_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Surface Collection!", "reallyDeleteSurfaceCollection()", "doNotDelete()");
	}
}

reallyDeleteSurfaceCollection(){
    deleteArchEnt(surface_collection_id);
    cancelTabGroup("surfaceCollection", false);
}

updateSurfaceCollection(id) {
	if (isNull(id)) id = null;
	
	data = getCreatedGeometry();
	if (!isNull(id)) {
		entity = fetchArchEnt(id);
		if (entity != null) {
			data = entity.getGeometryList();
		}
	}
	
    saveTabGroup("surfaceCollection", id, data, null, "onSurfaceCollectionSaved()");
}

onSurfaceCollectionSaved() {
	surface_collection_id = getLastSavedRecordId();
	
    showTabGroup("surfaceCollection", surface_collection_id);
}

/*** LOT ***/

String lot_id = null;

onEvent("lot/lotDetail/Update", "click", "saveLot(lot_id)");
onEvent("lot/lotDetail/Update2", "click", "saveLot(lot_id)");
onEvent("lot/lotDetail/Delete", "click", "deleteLot()");

deleteLot(){
	if (!isNull(lot_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Lot!", "reallyDeleteLot()", "doNotDelete()");
	}
}

reallyDeleteLot(){
    deleteArchEnt(lot_id);
    cancelTabGroup("lot", false);
}

saveLot(id) {
	if (isNull(getFieldValue("lot/lotDetail/LotID"))) {
		showWarning("Logic Error", "Cannot save record without id");
		return;
	}
	updateLot(id);
}

updateLot(id) {
	if (isNull(id)) id = null;

    if (isNull(surface_collection_id)) {
        showWarning("Logic Error", "Lot cannot be saved as parent surface collection is not saved or loaded.");
        return null;
    } else {
		saveTabGroup("lot", id, null, null, "onLotSaved()");
    }
}

onLotSaved() {
	lot_id = getLastSavedRecordId();
	
	saveEntitiesToRel("SurfaceLot", surface_collection_id, lot_id);
	
    showTabGroup("lot", lot_id);
}

/*** STRUCTURE WALL ***/

String structure_wall_id = null;

onEvent("wall/structureWall/WallPhotos", "click", "attachPictureTo(\"wall/structureWall/PhotoGallery\")");

onEvent("wall/structureWall/Duplicate", "delayclick", "duplicateStructureWall(structure_wall_id,\"onDuplicateStructureWallSaved()\")");

onEvent("wall/structureWall/Update", "delayclick", "saveStructureWall(structure_wall_id,\"onStructureWallSaved()\")");
onEvent("wall/structureWall/Update2", "delayclick", "saveStructureWall(structure_wall_id,\"onStructureWallSaved()\")");
onEvent("wall/structureWall/Delete", "click", "deleteStructureWall()");
onEvent("wall", "show", "recalcStructureWall()");

saveStructureWall(id, callback) {
	if (isNull(getFieldValue("wall/structureWall/WallID"))) {
		showWarning("Logic Error", "Cannot save record without id");
		return;
	}
	updateStructureWall(id, callback);
	recalcStructureWall();
	duplicateEAID();
}

setWindowCountForStructureWall(value){
    setFieldValue("wall/structureWall/WindowCount",value);
}

setNicheCountForStructureWall(value){
    setFieldValue("wall/structureWall/NicheCount",value);
}

setDoorwayCountForStructureWall(value){
    setFieldValue("wall/structureWall/DoorwayCount",value);
}

duplicateStructureWall(id, callback) {
    if (isNull(getFieldValue("wall/structureWall/WallID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    updateStructureWall(id, callback);

}

onDuplicateStructureWallSaved(){
	structure_wall_id = getLastSavedRecordId();
	
	saveEntitiesToRel("StructureContains", structure_id, structure_wall_id);
	
    showTabGroup("wall", structure_wall_id);
    duplicateEAID();
	structure_wall_id = null;
	makeStructureWallNum();
}

makeStructureWallNum(){
if (!isNull(structure_id)){
    Object wallNum = fetchOne("select count(distinct uuid)+1 "+
                    " from (select uuid, relationshipid, deleted "+
                    "        from aentreln join (select uuid, relationshipid, max(aentrelntimestamp) as aentrelntimestamp "+
                    "                             from aentreln "+
                    "                             group by uuid, relationshipid) using (uuid, relationshipid, aentrelntimestamp) "+
                    "        group by uuid, relationshipid ) a "+
                    "join archentity using (uuid) JOIN (select uuid, max(aenttimestamp) as aenttimestamp from archentity group by uuid) using (uuid, aenttimestamp) "+
                    "join aenttype using (aenttypeid) "+
                    "where relationshipid in (select relationshipid "+
                    "                          from aentreln "+
                    "                          where uuid = "+structure_id+") "+
                    "and aenttypename = 'StructureWall' "+
                    "and a.deleted is null "+
                    "and archentity.deleted is null "+
                    "and uuid != "+structure_id+"; ");

    setFieldValue("wall/structureWall/WallID", getFieldValue("structure/info/ArchaeologicalElementID") + " Wall: " +wallNum.get(0));
    }
}

deleteStructureWall(){
	if (!isNull(structure_wall_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Structure Wall!", "reallyDeleteStructureWall()", "doNotDelete()");
	}
}

reallyDeleteStructureWall(){
    deleteArchEnt(structure_wall_id);
    cancelTabGroup("wall", false);
}

updateStructureWall(id, callback) {
	if (isNull(id)) id = null;

   	if (isNull(structure_id)) {
  		showWarning("Logic Error", "Structure Wall cannot be saved as parent structure is not saved or loaded.");
  		return null;
   	} else {
	    saveTabGroup("wall", id, null, null, callback);
   	}
}

onStructureWallSaved() {
	structure_wall_id = getLastSavedRecordId();
	
	saveEntitiesToRel("StructureContains", structure_id, structure_wall_id);
	
    showTabGroup("wall", structure_wall_id);
    duplicateEAID();
}

recalcStructureWall(){
    if (!isNull(structure_wall_id)){
         Object windowNum = fetchOne("select count(distinct uuid) "+
                    " from (select uuid, relationshipid, deleted "+
                    "        from aentreln join (select uuid, relationshipid, max(aentrelntimestamp) as aentrelntimestamp "+
                    "                             from aentreln "+
                    "                             group by uuid, relationshipid) using (uuid, relationshipid, aentrelntimestamp) "+
                    "        group by uuid, relationshipid ) a "+
                    "join archentity using (uuid) JOIN (select uuid, max(aenttimestamp) as aenttimestamp from archentity group by uuid) using (uuid, aenttimestamp) "+
                    "join aenttype using (aenttypeid) "+
                    "where relationshipid in (select relationshipid "+
                    "                          from aentreln "+
                    "                          where uuid = "+structure_wall_id+") "+
                    "and aenttypename = 'Window' "+
                    "and a.deleted is null "+
                    "and archentity.deleted is null "+
                    "and uuid != "+structure_wall_id+"; ");
         Object nicheNum = fetchOne("select count(distinct uuid) "+
                    " from (select uuid, relationshipid, deleted "+
                    "        from aentreln join (select uuid, relationshipid, max(aentrelntimestamp) as aentrelntimestamp "+
                    "                             from aentreln "+
                    "                             group by uuid, relationshipid) using (uuid, relationshipid, aentrelntimestamp) "+
                    "        group by uuid, relationshipid ) a "+
                    "join archentity using (uuid) JOIN (select uuid, max(aenttimestamp) as aenttimestamp from archentity group by uuid) using (uuid, aenttimestamp) "+
                    "join aenttype using (aenttypeid) "+
                    "where relationshipid in (select relationshipid "+
                    "                          from aentreln "+
                    "                          where uuid = "+structure_wall_id+") "+
                    "and aenttypename = 'Niche' "+
                    "and a.deleted is null "+
                    "and archentity.deleted is null "+
                    "and uuid != "+structure_wall_id+"; ");
         Object doorwayNum = fetchOne("select count(distinct uuid) "+
                    " from (select uuid, relationshipid, deleted "+
                    "        from aentreln join (select uuid, relationshipid, max(aentrelntimestamp) as aentrelntimestamp "+
                    "                             from aentreln "+
                    "                             group by uuid, relationshipid) using (uuid, relationshipid, aentrelntimestamp) "+
                    "        group by uuid, relationshipid ) a "+
                    "join archentity using (uuid) JOIN (select uuid, max(aenttimestamp) as aenttimestamp from archentity group by uuid) using (uuid, aenttimestamp) "+
                    "join aenttype using (aenttypeid) "+
                    "where relationshipid in (select relationshipid "+
                    "                          from aentreln "+
                    "                          where uuid = "+structure_wall_id+") "+
                    "and aenttypename = 'Doorway' "+
                    "and a.deleted is null "+
                    "and archentity.deleted is null "+
                    "and uuid != "+structure_wall_id+"; ");


	    setFieldValue("wall/structureWall/WindowCount", Integer.valueOf(windowNum.get(0)));
	    setFieldValue("wall/structureWall/DoorwayCount", Integer.valueOf(doorwayNum.get(0)));
	    setFieldValue("wall/structureWall/NicheCount", Integer.valueOf(nicheNum.get(0)));
    }
}

/*** STRUCTURE ***/
String structure_id = null;

onFocus("structure/info/ArchaeologicalElementID", null, "duplicateEAID()");
onEvent("structure", "show", "duplicateEAID()");

onEvent("structure/final/AddAttachment", "click", "attachFileTo(\"structure/final/filelist\")");
onEvent("structure/final/Sketch", "click", "attachFileTo(\"structure/final/sketchfilelist\")");
onEvent("structure/final/Photo", "click", "attachPictureTo(\"structure/final/PhotoGallery\")");
onEvent("structure/final/Video", "click", "attachVideoTo(\"structure/final/VideoGallery\")");
onEvent("structure/final/Audio", "click", "attachAudioTo(\"structure/final/AudioList\")");

onEvent("structure/final/Update", "delayclick", "saveStructure(structure_id,\"onStructureSaved()\")");
onEvent("structure/final/Update2", "delayclick", "saveStructure(structure_id,\"onStructureSaved()\")");
onEvent("structure/info/Update", "delayclick", "saveStructure(structure_id,\"onStructureSaved()\")");
onEvent("structure/info/Update2", "delayclick", "saveStructure(structure_id,\"onStructureSaved()\")");
onEvent("structure/component/Update", "delayclick", "saveStructure(structure_id,\"onStructureSaved()\")");
onEvent("structure/component/Update2", "delayclick", "saveStructure(structure_id,\"onStructureSaved()\")");
onEvent("structure/final/Delete", "click", "deleteStructure()");

onEvent("structure/final/viewattached", "click", "viewArchEntAttachedFiles(structure_id)");

duplicateEAID(){
    eaid = getFieldValue("structure/info/ArchaeologicalElementID");
    setFieldValue("structure/component/EAidDupe", eaid);
    setFieldValue("structure/final/EAidDupe", eaid);
    setFieldValue("wall/structureWall/EAidDupe", eaid);
    setFieldValue("window/windowDetail/EAidDupe", eaid);
    setFieldValue("niche/nicheDetail/EAidDupe", eaid);
    setFieldValue("corner/cornerDetail/EAidDupe", eaid);
}

saveStructure(id,callback) {
	if ((id == null && getCreatedGeometry() == null) ||
		isNull(getFieldValue("structure/info/ArchaeologicalElementID"))) {

		showWarning("Logic Error", "Cannot save record without geometry or id");
		return;
	}
	updateStructure(id, callback);
	recalcComponents();
	duplicateEAID();
	clearCreatedGeometry();
}

deleteStructure(){
	if (!isNull(structure_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Structure!", "reallyDeleteStructure()", "doNotDelete()");
	}
}

reallyDeleteStructure(){
    deleteArchEnt(structure_id);
    cancelTabGroup("structure", false);
}

updateStructure(id, callback){
    if (isNull(id)) id = null;
	
	data = getCreatedGeometry();
	if (!isNull(id)) {
		entity = fetchArchEnt(id);
		data = entity.getGeometryList();
		System.out.println("" + entity.getGeometryList());
	}
    saveTabGroup("structure", id, data, null, callback);
}

onStructureSaved() {
	structure_id = getLastSavedRecordId();
	
    showTabGroup("structure", structure_id);
}

/*** LOAD ***/

updateAllSurfaceCollection() {
	Object lot = fetchEntityList("Lot");
	populateDropDown("surfaceCollection/load/lotList", lot);
}

updateAllSpecialFind() {
	Object structure = fetchEntityList("Structure");
	populateDropDown("specialFind/findDetail/AssociateWithList", structure);
}

updateAllStructure() {
	Object localStructureWall = new ArrayList();
	Object localCorner = new ArrayList();

	if (!isNull(structure_id)) {
		localStructureWall = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
"  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
"            FROM latestNonDeletedArchentIdentifiers\n"+
"           WHERE aenttypename = 'StructureWall'\n"+
"             AND uuid in (select uuid\n"+
"                            FROM latestNonDeletedAentReln\n"+
"                           where relationshipid in (select relationshipid\n"+
"                                                      FROM latestNonDeletedAentReln\n"+
"                                                      JOIN relationship using (relationshipid)\n"+
"                                                      JOIN relntype using (relntypeid)\n"+
"                                                     where uuid = "+structure_id+"\n"+
"                                                       and relntypeName = 'StructureContains')\n"+
"                             and uuid != "+structure_id+")\n"+
"        ORDER BY uuid, attributename ASC)\n"+
"group by uuid\n"+
"order by valuetimestamp desc, uuid, attributename;");

    	localCorner =  fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
"  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
"            FROM aentvalue\n"+
"            JOIN attributekey USING (attributeid)\n"+
"            JOIN archentity USING (uuid)\n"+
"            JOIN aenttype USING (aenttypeid)\n"+
"            JOIN (select attributeid, aenttypeid\n"+
"                    FROM idealaent\n"+
"                    JOIN aenttype using (aenttypeid) where isIdentifier is 'true') USING (attributeid, aenttypeid)\n"+
"            LEFT OUTER JOIN vocabulary USING (vocabid, attributeid)\n"+
"            JOIN (SELECT uuid, attributeid, valuetimestamp\n"+
"                    FROM aentvalue JOIN (select uuid, attributeid, max(valuetimestamp) as valuetimestamp from aentvalue group by uuid, attributeid) USING (uuid, attributeid, valuetimestamp)\n"+
"                    JOIN archentity USING (uuid) JOIN (select uuid, max(aenttimestamp) as aenttimestamp from archentity group by uuid) using (uuid, aenttimestamp)\n"+
"                   WHERE archentity.deleted is NULL\n"+
"                     ) USING (uuid, attributeid, valuetimestamp)\n"+
"           WHERE aentvalue.deleted is NULL\n"+
"             and aenttypename = 'Corner'\n"+
"             AND uuid in (select uuid\n"+
"                            FROM (select uuid, relationshipid, deleted\n"+
"                                    FROM aentreln JOIN (select uuid, relationshipid, max(aentrelntimestamp) as aentrelntimestamp from aentreln GROUP BY uuid, relationshipid) USING (uuid, relationshipid, aentrelntimestamp)\n"+
"                                )\n"+
"                           where relationshipid in (select relationshipid\n"+
"                                                      FROM aentreln\n"+
"                                                      JOIN relationship using (relationshipid)\n"+
"                                                      JOIN relntype using (relntypeid)\n"+
"                                                     where uuid = "+structure_id+"\n"+
"                                                       and relntypeName = 'StructureContains')\n"+
"                             and deleted is null\n"+
"                             and uuid !="+structure_id+")\n"+
"                GROUP BY uuid, attributeid\n"+
"        ORDER BY valuetimestamp desc, uuid, attributename ASC)\n"+
"group by uuid\n"+
"order by valuetimestamp desc, uuid, attributename;\n");
	}

	populateDropDown("structure/load/structureWallList", localStructureWall);
    populateDropDown("structure/load/cornerList", localCorner);

}

updateAllWindow() {
	Object structureWallFreeWall =   fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response\n"+
        "FROM ( SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "         FROM aentvalue  JOIN attributekey USING (attributeid)\n"+
        "         join archentity USING (uuid)\n"+
        "         join aenttype USING (aenttypeid)\n"+
        "         join (select attributeid, aenttypeid\n"+
        "                 from idealaent join aenttype using (aenttypeid)\n"+
        "                 where isIdentifier is 'true'\n"+
        "                 and aenttypename IN ('StructureWall', 'Wall')\n"+
        "                 ) USING (attributeid, aenttypeid)\n"+
        "         LEFT OUTER JOIN vocabulary USING (vocabid, attributeid)\n"+
        "         JOIN (SELECT uuid, attributeid, max(valuetimestamp) as valuetimestamp\n"+
        "               FROM aentvalue\n"+
        "                GROUP BY uuid, attributeid)\n"+
        "         USING (uuid, attributeid, valuetimestamp)\n"+
        "         JOIN (SELECT uuid, max(aenttimestamp) as aenttimestamp\n"+
        "               FROM archentity\n"+
        "               group by uuid) USING (uuid, aenttimestamp)\n"+
        "         WHERE aentvalue.deleted is NULL\n"+
        "           and archentity.deleted is NULL\n"+
        "         ORDER BY uuid, attributename ASC)\n"+
        "group by uuid;\n");
	populateDropDown("window/windowDetail/AssociateWithList", structureWallFreeWall);
}


updateAllNiche() {
	Object sWallsAndCorners =   fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response\n"+
        "FROM ( SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "         FROM aentvalue  JOIN attributekey USING (attributeid)\n"+
        "         join archentity USING (uuid)\n"+
        "         join aenttype USING (aenttypeid)\n"+
        "         join (select attributeid, aenttypeid\n"+
        "                 from idealaent join aenttype using (aenttypeid)\n"+
        "                 where isIdentifier is 'true'\n"+
        "                 and aenttypename IN ('StructureWall', 'Corner')\n"+
        "                 ) USING (attributeid, aenttypeid)\n"+
        "         LEFT OUTER JOIN vocabulary USING (vocabid, attributeid)\n"+
        "         JOIN (SELECT uuid, attributeid, max(valuetimestamp) as valuetimestamp\n"+
        "               FROM aentvalue\n"+
        "                GROUP BY uuid, attributeid)\n"+
        "         USING (uuid, attributeid, valuetimestamp)\n"+
        "         JOIN (SELECT uuid, max(aenttimestamp) as aenttimestamp\n"+
        "               FROM archentity\n"+
        "               group by uuid) USING (uuid, aenttimestamp)\n"+
        "         WHERE aentvalue.deleted is NULL\n"+
        "           and archentity.deleted is NULL\n"+
        "         ORDER BY uuid, attributename ASC)\n"+
        "group by uuid;\n");
	populateDropDown("niche/nicheDetail/AssociateWithList", sWallsAndCorners);
}


updateAllFreeWall() {
	Object fWallsAndStructures =  fetchAll("select '', '', '' as valuetimestamp union select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "FROM ( SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "         FROM aentvalue  JOIN attributekey USING (attributeid)\n"+
        "         join archentity USING (uuid)\n"+
        "         join aenttype USING (aenttypeid)\n"+
        "         join (select attributeid, aenttypeid\n"+
        "                 from idealaent join aenttype using (aenttypeid)\n"+
        "                 where isIdentifier is 'true'\n"+
        "                 and aenttypename IN ('Structure', 'Wall')\n"+
        "                 ) USING (attributeid, aenttypeid)\n"+
        "         LEFT OUTER JOIN vocabulary USING (vocabid, attributeid)\n"+
        "         JOIN (SELECT uuid, attributeid, max(valuetimestamp) as valuetimestamp\n"+
        "               FROM aentvalue\n"+
        "                GROUP BY uuid, attributeid)\n"+
        "         USING (uuid, attributeid, valuetimestamp)\n"+
        "         JOIN (SELECT uuid, max(aenttimestamp) as aenttimestamp\n"+
        "               FROM archentity\n"+
        "               group by uuid) USING (uuid, aenttimestamp)\n"+
        "         WHERE aentvalue.deleted is NULL\n"+
        "           and archentity.deleted is NULL\n"+
        "         ORDER BY uuid, attributename ASC)\n"+
        "group by uuid order by valuetimestamp;\n");
	populateDropDown("freeWall/freeWallDetail/AssociateWithList", fWallsAndStructures);
}

updateAllDoorway() {
	Object structureStructureWallFreeWall =  fetchAll("select '' as uuid, '', '' as valuetimestamp union select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "FROM ( SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "         FROM aentvalue  JOIN attributekey USING (attributeid)\n"+
        "         join archentity USING (uuid)\n"+
        "         join aenttype USING (aenttypeid)\n"+
        "         join (select attributeid, aenttypeid\n"+
        "                 from idealaent join aenttype using (aenttypeid)\n"+
        "                 where isIdentifier is 'true'\n"+
        "                 and aenttypename IN ('StructureWall', 'Structure', 'Wall')\n"+
        "                 ) USING (attributeid, aenttypeid)\n"+
        "         LEFT OUTER JOIN vocabulary USING (vocabid, attributeid)\n"+
        "         JOIN (SELECT uuid, attributeid, max(valuetimestamp) as valuetimestamp\n"+
        "               FROM aentvalue\n"+
        "                GROUP BY uuid, attributeid)\n"+
        "         USING (uuid, attributeid, valuetimestamp)\n"+
        "         JOIN (SELECT uuid, max(aenttimestamp) as aenttimestamp\n"+
        "               FROM archentity\n"+
        "               group by uuid) USING (uuid, aenttimestamp)\n"+
        "         WHERE aentvalue.deleted is NULL\n"+
        "           and archentity.deleted is NULL\n"+
        "         ORDER BY uuid, attributename ASC)\n"+
        "group by uuid order by valuetimestamp;\n");

	populateDropDown("doorway/doorDetail/AssociateWithList", structureStructureWallFreeWall);
}

updateAllLichen() {
	Object allEntities =  fetchAll("select '' as uuid, '', '' as valuetimestamp union select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "FROM ( SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "         FROM aentvalue  JOIN attributekey USING (attributeid)\n"+
        "         join archentity USING (uuid)\n"+
        "         join aenttype USING (aenttypeid)\n"+
        "         join (select attributeid, aenttypeid\n"+
        "                 from idealaent join aenttype using (aenttypeid)\n"+
        "                 where isIdentifier is 'true'\n"+
        "                 ) USING (attributeid, aenttypeid)\n"+
        "         LEFT OUTER JOIN vocabulary USING (vocabid, attributeid)\n"+
        "         JOIN (SELECT uuid, attributeid, max(valuetimestamp) as valuetimestamp\n"+
        "               FROM aentvalue\n"+
        "                GROUP BY uuid, attributeid)\n"+
        "         USING (uuid, attributeid, valuetimestamp)\n"+
        "         JOIN (SELECT uuid, max(aenttimestamp) as aenttimestamp\n"+
        "               FROM archentity\n"+
        "               group by uuid) USING (uuid, aenttimestamp)\n"+
        "         WHERE aentvalue.deleted is NULL\n"+
        "           and archentity.deleted is NULL\n"+
        "         ORDER BY uuid, attributename ASC)\n"+
        "group by uuid order by valuetimestamp;\n");
    populateDropDown("lichen/lichenDetail/AssociateWithList", allEntities);
}

updateAllFeature() {
	Object structure =  fetchAll("select '' as uuid, '', '' as valuetimestamp union select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
        "FROM ( SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
        "         FROM aentvalue  JOIN attributekey USING (attributeid)\n"+
        "         join archentity USING (uuid)\n"+
        "         join aenttype USING (aenttypeid)\n"+
        "         join (select attributeid, aenttypeid\n"+
        "                 from idealaent join aenttype using (aenttypeid)\n"+
        "                 where isIdentifier is 'true'\n"+
        "                 and aenttypename IN ('Structure')\n"+
        "                 ) USING (attributeid, aenttypeid)\n"+
        "         LEFT OUTER JOIN vocabulary USING (vocabid, attributeid)\n"+
        "         JOIN (SELECT uuid, attributeid, max(valuetimestamp) as valuetimestamp\n"+
        "               FROM aentvalue\n"+
        "                GROUP BY uuid, attributeid)\n"+
        "         USING (uuid, attributeid, valuetimestamp)\n"+
        "         JOIN (SELECT uuid, max(aenttimestamp) as aenttimestamp\n"+
        "               FROM archentity\n"+
        "               group by uuid) USING (uuid, aenttimestamp)\n"+
        "         WHERE aentvalue.deleted is NULL\n"+
        "           and archentity.deleted is NULL\n"+
        "         ORDER BY uuid, attributename ASC)\n"+
        "group by uuid order by valuetimestamp;\n");
	populateDropDown("feature/featureDetail/AssociateWithList", structure);
}

updateAll(){
	Object structure = fetchEntityList("Structure");
	Object wall = fetchEntityList("Wall");
	Object doorway = fetchEntityList("Doorway");
	Object feature = fetchEntityList("Feature");
	Object specialFind = fetchEntityList("SpecialFind");
	Object lichen = fetchEntityList("Lichen");
	Object surfaceCollection = fetchEntityList("SurfaceCollection");
	Object canal = fetchEntityList("Canal");
	Object niche = fetchEntityList("Niche");
	Object window = fetchEntityList("Window");

	populateDropDown("control/data/structureList", structure);
	populateDropDown("control/data/wallList", wall);
	populateDropDown("control/data/doorwayList", doorway);
	populateDropDown("control/data/featureList", feature);
	populateDropDown("control/data/specialFindList", specialFind);
	populateDropDown("control/data/lichenList", lichen);
	populateDropDown("control/data/surfaceCollectionList", surfaceCollection);
	populateDropDown("control/data/canalList", canal);
	populateDropDown("control/data/nicheList", niche);
	populateDropDown("control/data/windowList", window);
}

onEvent("control/data", "show", "updateAll()");
onEvent("feature/featureDetail", "show", "updateAllFeature()");
onEvent("lichen/lichenDetail", "show", "updateAllLichen()");
onEvent("doorway/doorDetail", "show", "updateAllDoorway()");
onEvent("freeWall/freeWallDetail", "show", "updateAllFreeWall()");
onEvent("niche/nicheDetail", "show", "updateAllNiche()");
onEvent("niche/nicheDetail", "show", "duplicateEAID()");
onEvent("window/windowDetail", "show", "updateAllWindow()");
onEvent("structure/load", "show", "updateAllStructure()");
onEvent("specialFind/findDetail", "show", "updateAllSpecialFind()");
onEvent("surfaceCollection/load", "show", "updateAllSurfaceCollection()");

loadStructure() {
	structure_id = getFieldValue("control/data/structureList");
	if (isNull(structure_id)) return;

    populateDropDown("structure/info/Preservation", makeVocab("Preservation"));
    populateDropDown("structure/info/Form", makeVocab("Form"));
    populateList("structure/component/WallsInternalPartition", makeVocab("WallsInternalPartition"));
    populateList("structure/info/ConstructionQuality", makeVocab("ConstructionQuality"));
    populateList("structure/info/ConstructionPeriod", makeVocab("ConstructionPeriod"));
    populateList("structure/info/Modifications", makeVocab("Modifications"));
    populateDropDown("structure/info/PrincipalFunction", makeVocab("PrincipalFunction"));
    populateDropDown("structure/info/Classification", makeVocab("Classification"));
    populateList("structure/info/StuccoInterior", makeVocab("StuccoInterior"));
    populateList("structure/info/StuccoExterior", makeVocab("StuccoExterior"));
    populateDropDown("structure/info/RoofForm", makeVocab("RoofForm"));
    
	showTabGroup("structure", structure_id);
	
}

loadWall() {
	wall_id = getFieldValue("control/data/wallList");
	if (isNull(wall_id)) return;
	
	populatePictureGallery("freeWall/freeWallDetail/MasonryType", makeGallery("MasonryType"));
    populateList("freeWall/freeWallDetail/WallClass", makeVocab("WallClass"));
    populateList("freeWall/freeWallDetail/WallPreservation", makeVocab("WallPreservation"));
    populateList("freeWall/freeWallDetail/WallHeightPreservation", makeVocab("WallHeightPreservation"));
    
	showTabGroup("freeWall", wall_id);
}

loadDoorway() {
	doorway_id = getFieldValue("control/data/doorwayList");
	if (isNull(doorway_id)) return;

	populateList("doorway/doorDetail/DoorMasonry", makeVocab("DoorMasonry"));
    populateList("doorway/doorDetail/DoorHeightPreservation", makeVocab("DoorHeightPreservation"));
    populateList("doorway/doorDetail/DoorPosition", makeVocab("DoorPosition"));
    
	showTabGroup("doorway", doorway_id);

	setDoorwayGPSFields(doorway_id);
}

setDoorwayGPSFields(id) {
	archEntity = fetchArchEnt(id);
	geomList = archEntity.getGeometryList();
	setDoorwayGPSFieldsFromPoint(geomList);
}

setDoorwayGPSFieldsFromPoint(geomList) {
	if (geomList != null && !geomList.isEmpty()) {
		point = geomList.get(0);
		p = point.getMapPos();
		setFieldValue("doorway/doorDetail/GPSLong", "" + p.x);
		setFieldValue("doorway/doorDetail/GPSLat", "" + p.y);
	}
}

loadFeature() {
	feature_id = getFieldValue("control/data/featureList");
	if (isNull(feature_id)) return;

	showTabGroup("feature", feature_id);
}

loadSpecialFind() {
	special_find_id = getFieldValue("control/data/specialFindList");
	if (isNull(special_find_id)) return;
	
	populateList("specialFind/findDetail/Type", makeVocab("Type"));
	
	showTabGroup("specialFind", special_find_id);
}

loadLichen() {
	lichen_id = getFieldValue("control/data/lichenList");
	if (isNull(lichen_id)) return;
	
	populateList("lichen/lichenDetail/Substrate", makeVocab("Substrate"));
    populateList("lichen/lichenDetail/Aspect", makeVocab("Aspect"));
    populateList("lichen/lichenDetail/InsideOutside", makeVocab("InsideOutside"));
    
	showTabGroup("lichen", lichen_id);

	setLichenGPSFields(lichen_id);
}

setLichenGPSFields(id) {
	archEntity = fetchArchEnt(id);
	geomList = archEntity.getGeometryList();
	setLichenGPSFieldsFromPoint(geomList);
}

setLichenGPSFieldsFromPoint(geomList) {
	if (geomList != null && !geomList.isEmpty()) {
		point = geomList.get(0);
		p = point.getMapPos();
		setFieldValue("lichen/lichenDetail/GPSLong", "" + p.x);
		setFieldValue("lichen/lichenDetail/GPSLat", "" + p.y);
	}
}

loadSurfaceCollection() {
	surface_collection_id = getFieldValue("control/data/surfaceCollectionList");
	if (isNull(surface_collection_id)) return;
	
    populateList("surfaceCollection/description/SurfaceCollectionContext", makeVocab("SurfaceCollectionContext"));
    populateList("surfaceCollection/material/DiagnosticsPresent", makeVocab("DiagnosticsPresent"));
    populateList("surfaceCollection/material/MaterialDensity", makeVocab("MaterialDensity"));
    populateList("surfaceCollection/material/LotLabPriority", makeVocab("LotLabPriority"));
    
	showTabGroup("surfaceCollection", surface_collection_id);
}

loadLot() {
	lot_id = getFieldValue("surfaceCollection/load/lotList");
	if (isNull(lot_id)) return;
	
	populateList("lot/lotDetail/Material", makeVocab("Material"));
	
	showTabGroup("lot", lot_id);
}

loadCanal() {
	canal_id = getFieldValue("control/data/canalList");
	if (isNull(canal_id)) return;

	showTabGroup("canal", canal_id);
}

loadStructureWall() {
	structure_wall_id = getFieldValue("structure/load/structureWallList");
	if (isNull(structure_wall_id)) return;
	
	populatePictureGallery("wall/structureWall/MasonryType", makeGallery("MasonryType"));
	populateList("wall/structureWall/InkaMasonry", makeVocab("InkaMasonry"));
	populateList("wall/structureWall/Gable", makeVocab("Gable"));
	populateList("wall/structureWall/WallHeightPreservation", makeVocab("WallHeightPreservation"));
	
	showTabGroup("wall", structure_wall_id);
}

loadNiche() {
	niche_id = getFieldValue("control/data/nicheList");
	if (isNull(niche_id)) return;
	
	populateList("niche/nicheDetail/NicheForm", makeVocab("NicheForm"));
	populateList("niche/nicheDetail/NicheHeightPreservation", makeVocab("NicheHeightPreservation"));
	populateList("niche/nicheDetail/NicheWidthLoc", makeVocab("NicheWidthLoc"));
	populateList("niche/nicheDetail/NicheAltar", makeVocab("NicheAltar"));
	
	showTabGroup("niche", niche_id);
}

loadWindow() {
	window_id = getFieldValue("control/data/windowList");
	if (isNull(window_id)) return;
	
	populateList("window/windowDetail/WindowHeightPreservation", makeVocab("WindowHeightPreservation"));
	
	showTabGroup("window", window_id);
}

loadCorner() {
	corner_id = getFieldValue("structure/load/cornerList");
	if (isNull(corner_id)) return;
	
	populateDropDown("corner/cornerDetail/CornerExteriorForm", makeVocab("CornerExteriorForm"));
    populateDropDown("corner/cornerDetail/CornerInteriorForm", makeVocab("CornerInteriorForm"));
    populateList("corner/cornerDetail/InkaMasonry", makeVocab("InkaMasonry"));
    populatePictureGallery("corner/cornerDetail/MasonryType", makeGallery("MasonryType"));
    
	showTabGroup("corner", corner_id);
}

onEvent("control/data/structureLoad", "click", "loadStructure()");
onEvent("control/data/wallLoad", "click", "loadWall()");
onEvent("control/data/doorwayLoad", "click", "loadDoorway()");
onEvent("control/data/featureLoad", "click", "loadFeature()");
onEvent("control/data/specialFindLoad", "click", "loadSpecialFind()");
onEvent("control/data/lichenLoad", "click", "loadLichen()");
onEvent("control/data/surfaceCollectionLoad", "click", "loadSurfaceCollection()");
onEvent("control/data/canalLoad", "click", "loadCanal()");
onEvent("control/data/nicheLoad", "click", "loadNiche()");
onEvent("control/data/windowLoad", "click", "loadWindow()");
onEvent("surfaceCollection/load/lotLoad", "click", "loadLot()");
onEvent("structure/load/structureWallLoad", "click", "loadStructureWall()");
onEvent("structure/load/cornerLoad", "click", "loadCorner()");

doNotDelete(){
    showToast("Delete Cancelled.");
}
