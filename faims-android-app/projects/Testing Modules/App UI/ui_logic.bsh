makeVocab(String attrib, FetchCallback callback){
    fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' ", callback);
}

makePictureGallery(String attrib, FetchCallback callback){
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabname;", callback);
}

getAttributeName(String vocab) {
    Object values = fetchOne("select vocabName from vocabulary where vocabid = '" + vocab + "';");   
    return values.get(0);
}


displayAlert(){
	showTextAlert("Alert", "Entity to Load:", "loadOK()", "loadCancel()");
}

displayDateAlert(){
	showDateAlert("Alert", "Set Date:", "showToast(getLastDateAlertInput())", "showToast(\"Dialog cancelled\")");
}

displayTimeAlert(){
	showTimeAlert("Alert", "Set Time:", "showToast(getLastTimeAlertInput())", "showToast(\"Dialog cancelled\")");
}

loadCancel() {
  showToast("Dialog Canceled");
}
loadOK() {
  entityId = getLastTextAlertInput();
  showToast("Entered text: "+entityId);
}

onEvent("App/LogicTriggered/ShowTextWarning","click", "displayAlert()");
onEvent("App/LogicTriggered/ShowDateWarning","click", "displayDateAlert()");
onEvent("App/LogicTriggered/ShowTimeWarning","click", "displayTimeAlert()");
onEvent("App/LogicTriggered/ShowWarning", "click", "showWarning(\"Warning\", \"You have been warned.\")");
onEvent("App/LogicTriggered/ShowToast", "click", "onClickButton()");
onEvent("App/LogicTriggered/ShowHidden", "click", "showHiddenTab()");
onEvent("App/Hidden/HideTab", "click", "hideTab()");

boolean flag = false;

hideTab(){
	flag = false;
    cancelTab("App/Hidden", false);
    showTab("App/Inputs");
    refreshActionBarMenu();
}

showHiddenTab(){
	flag = true;
	showTab("App/Hidden");
	refreshActionBarMenu();
}
	
addActionBarItem("hidden tab", new ToggleActionButtonCallback() {
	
    actionOnLabel() {
        "Hide tab";
    }
    actionOn() {
    	hideTab();
    }
    isActionOff() {
    	isTabHidden();
    }
    actionOffLabel() {
        "Show Tab";
    }
    actionOff() {
    	showHiddenTab();
    }

});

boolean isTabHidden(){
	return flag;
}



String printOut1 = "This is ONE";
String printOut2 = "This is TWO";
int i = 0;

onClickButton() {
    i = i % 3;

    if(i == 0){
        showToast(printOut1);
    } else if (i == 1){
        showToast(printOut2);
    } else {
        showToast("{printOut3}");
    }

    i++; 
}

loadAttributes(){
    setFieldValue("App/Inputs/ReadOnly", "This is Read Only.");
    makeVocab("Radio", new FetchCallback() {
        onFetch(result) {
            populateRadioGroup("App/Selects/Radio", result);
        }
    });
    
    makePictureGallery("Checkbox", new FetchCallback() {
        onFetch(result) {
            populateCheckBoxGroup("App/Selects/Checkbox", result);
        }
    });
    
    makeVocab("Dropdown", new FetchCallback() {
        onFetch(result) {
            populateDropDown("App/Selects/Dropdown", result);
        }
    });
    
    populateHierarchicalDropDown("App/Selects/HeirarchicalDropdown", "Hierarchical Dropdown");

    makePictureGallery("Picture Gallery", new FetchCallback() {
        onFetch(result) {
            populatePictureGallery("App/Selects/PictureGallery", result);
        }
    });
    
    populateHierarchicalPictureGallery("App/Selects/HeirarchicalPictureGallery", "Hierarchical Picture Gallery");

    makeVocab("List", new FetchCallback() {
        onFetch(result) {
            populateList("App/Lists/List", result);  
        }
    });
}

loadAttributes();

onEvent("App/Maps/gpsgo", "click", "startInternalGPS()");

setGPSUpdateInterval(4);

onEvent("App/Maps/startTimeLog", "click", "startTrackingGPS(\"time\", 10, \"saveTimeGPSTrack()\")");
onEvent("App/Maps/startDistanceLog", "click", "startTrackingGPS(\"distance\", 10, \"saveDistanceGPSTrack()\")");
onEvent("App/Maps/stopTrackLog", "click", "stopTrackingGPS()");

saveTimeGPSTrack() {
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("gps_type", "time", null, null, null));
    saveGPSTrack(attributes);
}

saveDistanceGPSTrack() {
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("gps_type", "distance", null, null, null));
    saveGPSTrack(attributes);
}

saveGPSTrack(List attributes) {
    position = getGPSPosition();
    if (position == null) return;

    attributes.add(createEntityAttribute("gps_user", "" + user.getUserId(), null, null, null));
    attributes.add(createEntityAttribute("gps_timestamp", "" + getCurrentTime(), null, null, null));
    attributes.add(createEntityAttribute("gps_longitude", "" + position.getLongitude(), null, null, null));
    attributes.add(createEntityAttribute("gps_latitude", "" + position.getLatitude(), null, null, null));
    attributes.add(createEntityAttribute("gps_heading", "" + getGPSHeading(), null, null, null));
    attributes.add(createEntityAttribute("gps_accuracy", "" + getGPSEstimatedAccuracy(), null, null, null));
    
    positionProj = getGPSPositionProjected();
    Point p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
    ArrayList l = new ArrayList();
    l.add(p);
    
    saveArchEnt(null, "gps_track", l, attributes);
}

