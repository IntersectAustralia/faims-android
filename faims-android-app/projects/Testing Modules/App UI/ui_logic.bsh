makeVocab(String attrib){
    Object a = fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' ");
    return a;
}

makePictureGallery(String attrib){
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabname;");
}

getAttributeName(String vocab) {
    Object values = fetchOne("select vocabName from vocabulary where vocabid = '" + vocab + "';");   
    return values.get(0);
}

onEvent("App/Inputs/ShowWarning", "click", "showWarning(\"Warning\", \"You have been warned.\")");
onEvent("App/Inputs/ShowToast", "click", "showToast(\"Would you like some butter?\")");
onEvent("App/Inputs/ShowHidden", "click", "showTab(\"App/Hidden\")");
onEvent("App/Hidden/HideTab", "click", "cancelTab(\"App/Hidden\", false);showTab(\"App/Inputs\")");

loadAttributes(){
    setFieldValue("App/Inputs/ReadOnly", "This is Read Only.");
    populateRadioGroup("App/Selects/Radio", makeVocab("Radio"));
    populateCheckBoxGroup("App/Selects/Checkbox", makePictureGallery("Checkbox"));
    populateDropDown("App/Selects/Dropdown", makeVocab("Dropdown"));
    populateHierarchicalDropDown("App/Selects/HeirarchicalDropdown", "Hierarchical Dropdown");
    populatePictureGallery("App/Selects/PictureGallery", makePictureGallery("Picture Gallery"));
    populateHierarchicalPictureGallery("App/Selects/HeirarchicalPictureGallery", "Hierarchical Picture Gallery"); 
    populatePictureGallery("App/Selects/PictureGallery", makePictureGallery("pictures"));
    populateHierarchicalPictureGallery("App/Selects/HeirarchicalPictureGallery", "hipictures");
    populateList("App/Lists/List", makeVocab("List"));  
}

loadAttributes();
onEvent("App/Maps/gpsgo", "click", "startInternalGPS()");

setGPSUpdateInterval(4);

onEvent("App/Maps/startTimeLog", "click", "startTrackingGPS(\"time\", 10, \"saveTimeGPSTrack()\")");
onEvent("App/Maps/startDistanceLog", "click", "startTrackingGPS(\"distance\", 10, \"saveDistanceGPSTrack()\")");
onEvent("App/Maps/stopTrackLog", "click", "stopTrackingGPS()");

saveTimeGPSTrack() {
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("gps_type", "time", null, null, null));
    saveGPSTrack(attributes);
}

saveDistanceGPSTrack() {
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("gps_type", "distance", null, null, null));
    saveGPSTrack(attributes);
}

saveGPSTrack(List attributes) {
    position = getGPSPosition();
    if (position == null) return;

    attributes.add(createEntityAttribute("gps_user", "" + user.getUserId(), null, null, null));
    attributes.add(createEntityAttribute("gps_timestamp", "" + getCurrentTime(), null, null, null));
    attributes.add(createEntityAttribute("gps_longitude", "" + position.getLongitude(), null, null, null));
    attributes.add(createEntityAttribute("gps_latitude", "" + position.getLatitude(), null, null, null));
    attributes.add(createEntityAttribute("gps_heading", "" + getGPSHeading(), null, null, null));
    attributes.add(createEntityAttribute("gps_accuracy", "" + getGPSEstimatedAccuracy(), null, null, null));
    
    positionProj = getGPSPositionProjected();
    Point p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
    ArrayList l = new ArrayList();
    l.add(p);
    
    saveArchEnt(null, "gps_track", l, attributes);
}

