// USER
User user; // dont touch
String userid;

populateListForUsers() {
    fetchAll("select userid, fname ||' ' || lname from user where userdeleted is NULL", new FetchCallback() {
        onFetch(result) {
            populateList("user/tab1/users", result);
        }
    });
    return users;
}
populateListForUsers();

login(){
    fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';", new FetchCallback() {
        onFetch(userResult) {
            user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
            setUser(user);
            showTabGroup("menu");
        }
    });
}

onEvent("user/tab1/users", "click", "login()");

// CONTROLS


createOption(name, value) {
	ArrayList option = new ArrayList();
	option.add(name);
	option.add(value);
	return option;
}

options = new ArrayList();
options.add(createOption("trackLog", "Track Log"));

loadOptions() {
	populateList("menu/tab1/options", options);
}

onEvent("menu", "load", "loadOptions()");

onClickOption() {
	String value = getListItemValue();
	if ("trackLog".equals(value)) {
		showTabGroup("tabgroup1");
	} 
}

onEvent("menu/tab1/options", "click", "onClickOption()");




//Test for Tracklog work with pause

setGPSUpdateInterval(4);
onEvent("tabgroup1/tab1/startInternalGPS", "click", "startInternalGPS()");
onEvent("tabgroup1/tab1/startExternalGPS", "click", "startExternalGPS()");
onEvent("tabgroup1/tab1/startTimeLog", "click", "startTrackAlert()");
onEvent("tabgroup1/tab1/stopTrackLog", "click", "stopTrackingGPS()");
onEvent("tabgroup1/tab1/stopGPS", "click", "stopGPS()");

startTrackAlert(){
	
	startTrackingGPS("time", 10, "saveTimeGPSTrack()");

}
saveTimeGPSTrack() {
    showToast("still tracking");
    position = getGPSPosition();
    if (position == null) {
        showToast("not gps signal found");
    } else {
        showToast("Longitude:"+position.getLongitude());
    }
}


//Action Bar Testing

addActionBarItem("about", new ActionButtonCallback() {
    actionOnLabel() {
        "About";
    }
     
    actionOn() {
        showWarning("Test Module", "This module was created merely for test purposes. Use it as you will");
    }
});
 
 
// Toggle item
addActionBarItem("Tacklog", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Turn Time Track Log off";
    }
    actionOn() {
        stopTrackingGPS();  
    }
    isActionOff() {
        isTrackingGPS();
    }
    actionOffLabel() {
        "Turn Time Tracklog on";
    }
    actionOff() {
        startTrackAlert();
    }
});

addActionBarItem("External GPS", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Turn External GPS off";
    }
    actionOn() {
        stopGPS();
    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "Turn External GPS on";
    }
    actionOff() {
    	startExternalGPS();
    }
});

addActionBarItem("Internal GPS", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Turn Internal GPS off";
    }
    actionOn() {
    	stopGPS();
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "Turn Internal GPS on";
    }
    actionOff() {
         startInternalGPS();
    }
});

addActionBarItem("bluetooth", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Turn bluetooth off";
    }
    actionOn() {
    	onBluetoothStop();
    }
    isActionOff() {
        isBluetoothConnected();
    }
    actionOffLabel() {
        "Turn bluetooth on";
    }
    actionOff() {
         onBluetoothStart();
    }
});

messageBuffer = new ArrayList();
messageBufferSize = 5;
addMessage(message) {
	messageBuffer.add(message);
	if (messageBuffer.size() > messageBufferSize) {
		messageBuffer.remove(0);
	}
	value = "";
	for (i = 0; i < messageBuffer.size(); i++) {
		if (!value.isEmpty()) {
			value += "\n";
		}
		value += messageBuffer.get(i);
	}
	showWarning("Bluetooth Input",value);
}


onBluetoothStart() {
	createBluetoothConnection("onBluetoothInput()", 1);
}


onBluetoothStop() {
	destroyBluetoothConnection();
}


onBluetoothInput() {
	message = getBluetoothMessage();
	addMessage(message);
}
