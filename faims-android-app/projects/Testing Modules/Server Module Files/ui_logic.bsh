User user; // dont touch
String userid;

DATA_ENTRY_LAYER = "Data Entry Layer";
DATA_ENTRY_LAYER_ID = 0;
initMap() {
    setMapZoom("control/map/map", 19.0f);

    showBaseMap("control/map/map", "Base Layer", "files/data/files/map/map.tif");

    DATA_ENTRY_LAYER_ID = createCanvasLayer("control/map/map", DATA_ENTRY_LAYER);

    isEntity = true;
    queryName = "All entities";
    querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEntIdentifiers";
    addDatabaseLayerQuery("control/map/map", queryName, querySQL);

    addTrackLogLayerQuery("control/map/map", "track log entities", 
        "SELECT uuid, max(aenttimestamp) as aenttimestamp\n" + 
        " FROM archentity join aenttype using (aenttypeid)\n" +
        " where archentity.deleted is null\n" + 
        "   and lower(aenttypename) = lower('gps_track')\n" + 
        " group by uuid\n" + 
        " having max(aenttimestamp)");
        
    addSelectQueryBuilder("control/map/map", "Select entity by type", createQueryBuilder(
        "select uuid\n" + 
        "  from latestNonDeletedArchent\n" + 
        "  JOIN latestNonDeletedAentValue using (uuid)\n" + 
        "  join aenttype using (aenttypeid)\n" + 
        "  LEFT OUTER JOIN vocabulary using (vocabid, attributeid) \n" + 
        "  where lower(aenttypename) = lower(?) \n" + 
        "   group by uuid").addParameter("Type", "Structure"));
        
    addLegacySelectQueryBuilder("control/map/map", "Select geometry by id", "files/data/files/map/sydney.sqlite", "Geology100_Sydney", 
        createLegacyQueryBuilder("Select PK_UID from Geology100_Sydney where PK_UID = ?").addParameter("ID", null));
                    
    // define database layer styles for points, lines, polygons and text
    ps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
    ls = createLineStyle(10, Color.GREEN, 0.05f, 0.3f, null);
    pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    ts = createTextStyle(10, Color.WHITE, 40, Typeface.SANS_SERIF);

    showDatabaseLayer("control/map/map", "Entity Layer", isEntity, queryName, querySQL, ps, ls, pos, ts);
}

initMap();

makePictureGallery(String attrib){
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabname;");
}

populatePictureGallery("control/Files/Gallery", makePictureGallery("Pictures"));

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

getDefaultUsersList() {
    users = fetchAll("select userid, fname || ' ' || lname from user");
    return users;
}

populateListForUsers(){
    populateList("user/usertab/users", getDefaultUsersList());
}

populateListForUsers();

String username = "";
String device = "";

login(){
    Object userResult = fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';");
    User user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
    userid = userResult.get(0);
    setUser(user);
    username = userResult.get(1) + " " + userResult.get(2);
    showTabGroup("control");
}

onEvent("user/usertab/users", "click", "login()");